{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/2015-08-30_113215.png","path":"img/2015-08-30_113215.png","modified":0,"renderable":0},{"_id":"source/img/2015-08-30_113423.png","path":"img/2015-08-30_113423.png","modified":0,"renderable":0},{"_id":"source/img/2015-08-30_122425.png","path":"img/2015-08-30_122425.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-10_130439.png","path":"img/2015-09-10_130439.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-12_035642.png","path":"img/2015-09-12_035642.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-12_040514.png","path":"img/2015-09-12_040514.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-12_050307.png","path":"img/2015-09-12_050307.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-20_103325.png","path":"img/2015-09-20_103325.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-20_104140.png","path":"img/2015-09-20_104140.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-20_104818.png","path":"img/2015-09-20_104818.png","modified":0,"renderable":0},{"_id":"source/img/2015-09-13_174117.png","path":"img/2015-09-13_174117.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/img/20150912041903.jpg","path":"img/20150912041903.jpg","modified":0,"renderable":0},{"_id":"source/img/20150912062844.jpg","path":"img/20150912062844.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"8e7b422660fdcc61844eb259ede8b6cdca717c47","modified":1470466938493,"shasum":"8e7b422660fdcc61844eb259ede8b6cdca717c47"},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1470466938546,"shasum":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49"},{"_id":"themes/landscape/_config.yml","hash":"c59ab5713d13ab0a147c5275f8aae96aa0beeac6","modified":1470466938548,"shasum":"c59ab5713d13ab0a147c5275f8aae96aa0beeac6"},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1470466938593,"shasum":"d07f326588fef82f1d23ae3101c9ddfff34c132f"},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1470466938547,"shasum":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9"},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1470466938544,"shasum":"412e30530784993c8997aa8b1319c669b83b91c2"},{"_id":"source/_posts/2015-08-22-hello-new-home.md","hash":"7e7ff33759ef6d8e6177628de22c69c5e51ac79b","modified":1470466938495,"shasum":"7e7ff33759ef6d8e6177628de22c69c5e51ac79b"},{"_id":"source/_posts/2015-08-29-Install-clover-on-USB-stick.md","hash":"5a6dcbfad2314717e89368916b5e93fb682f2264","modified":1470466938495,"shasum":"5a6dcbfad2314717e89368916b5e93fb682f2264"},{"_id":"source/_posts/2015-08-30-fbinst-fbinstTool-no-menu问题.md","hash":"7463722c99f51a5f3e076692fdad4bf6b7660641","modified":1470466938496,"shasum":"7463722c99f51a5f3e076692fdad4bf6b7660641"},{"_id":"source/_posts/2015-09-05-Resize-MAC-OS-X-Yosemite-Disk.md","hash":"22584dcccd823cfd0c5c0273a3ef7804f7dd3259","modified":1470466938497,"shasum":"22584dcccd823cfd0c5c0273a3ef7804f7dd3259"},{"_id":"source/_posts/2015-09-05-restore-Yosemite-after-corrupted-by-grub2.md","hash":"0f70c2207cda7d83dffd72b314184ed5c199f1ca","modified":1470466938498,"shasum":"0f70c2207cda7d83dffd72b314184ed5c199f1ca"},{"_id":"source/_posts/2015-09-12-Set-up-Peanut-Hull-for-Raspberry-Pi.md","hash":"fa249a6389a1d4f55ffabde24f18d6aac1fb8969","modified":1470466938499,"shasum":"fa249a6389a1d4f55ffabde24f18d6aac1fb8969"},{"_id":"source/_posts/2015-09-12-Set-up-nginx-for-hexo.md","hash":"9d2cc554b434ece536347ced46a6abfabf594031","modified":1470466938500,"shasum":"9d2cc554b434ece536347ced46a6abfabf594031"},{"_id":"source/_posts/2015-09-12-new-toy-SanDisk-Ultra-16G-Class10-UHS-I.md","hash":"9d0527a4a7d26f20b45b4a723ca97dc7d45d0ca8","modified":1470466938502,"shasum":"9d0527a4a7d26f20b45b4a723ca97dc7d45d0ca8"},{"_id":"source/_posts/2015-09-20-Design-Patterns-Decorator-AOP-in-Python-and-C-C.md","hash":"7cc22a05d20baab7aecd893de1ebbe5a992dd16c","modified":1470466938503,"shasum":"7cc22a05d20baab7aecd893de1ebbe5a992dd16c"},{"_id":"source/img/2015-08-30_113215.png","hash":"af691e0f8034c0c783ac1f6c9f4af2e87397ebfa","modified":1470466938504,"shasum":"af691e0f8034c0c783ac1f6c9f4af2e87397ebfa"},{"_id":"source/img/2015-08-30_113423.png","hash":"d6084ea40639e81858e4e073f24f4b715b0d20e9","modified":1470466938505,"shasum":"d6084ea40639e81858e4e073f24f4b715b0d20e9"},{"_id":"source/img/2015-08-30_122425.png","hash":"815fa0d9e92cb33d5a634527c1fd7414816da924","modified":1470466938507,"shasum":"815fa0d9e92cb33d5a634527c1fd7414816da924"},{"_id":"source/img/2015-09-10_130439.png","hash":"f9900510614de67f3e9c802e6b65f10143ed150f","modified":1470466938509,"shasum":"f9900510614de67f3e9c802e6b65f10143ed150f"},{"_id":"source/img/2015-09-12_035642.png","hash":"07c2dffbebcfb4494e3987cc7a51af218d513aa4","modified":1470466938512,"shasum":"07c2dffbebcfb4494e3987cc7a51af218d513aa4"},{"_id":"source/img/2015-09-12_040514.png","hash":"6b32d0b25c62c11a6dea571ac2c5f787fbefa2f9","modified":1470466938513,"shasum":"6b32d0b25c62c11a6dea571ac2c5f787fbefa2f9"},{"_id":"source/img/2015-09-12_050307.png","hash":"dc6399e060c431af2e37d9167c3e8389158bdd69","modified":1470466938514,"shasum":"dc6399e060c431af2e37d9167c3e8389158bdd69"},{"_id":"source/_posts/2015-09-12-Set-up-the-Hexo-on-Raspberry-Pi.md","hash":"9d77f160f10a7cf718d0c75c5ccdc57d1a4794b4","modified":1470466938501,"shasum":"9d77f160f10a7cf718d0c75c5ccdc57d1a4794b4"},{"_id":"source/img/2015-09-20_103325.png","hash":"60692d1a19e1b72e221e36e3d52ef4f688f21296","modified":1470466938517,"shasum":"60692d1a19e1b72e221e36e3d52ef4f688f21296"},{"_id":"source/img/2015-09-20_104140.png","hash":"2e83b38cf9f50a9402ec158d63d1d4e6490239de","modified":1470466938519,"shasum":"2e83b38cf9f50a9402ec158d63d1d4e6490239de"},{"_id":"source/img/2015-09-20_104818.png","hash":"fb68b3c2c8a8bceb3ba844636392bb7b76ad7874","modified":1470466938520,"shasum":"fb68b3c2c8a8bceb3ba844636392bb7b76ad7874"},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1470466938587,"shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b"},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1470466938588,"shasum":"765426a9c8236828dc34759e604cc2c52292835a"},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1470466938589,"shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8"},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1470466938589,"shasum":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a"},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470466938591,"shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b"},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470466938592,"shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b"},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1470466938593,"shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e"},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1470466938594,"shasum":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c"},{"_id":"source/_posts/2015-09-10-cache-exercises-memory-read-optimization.md","hash":"76d533b0df39f87f4e3158a7f9cc0a18976842e2","modified":1470466938499,"shasum":"76d533b0df39f87f4e3158a7f9cc0a18976842e2"},{"_id":"source/img/2015-09-13_174117.png","hash":"d00896e9b994c8517e8630460abcf5e132448bdb","modified":1470466938516,"shasum":"d00896e9b994c8517e8630460abcf5e132448bdb"},{"_id":"source/_posts/2016/2016-08-06-work-on-the-cloud-thoroughly.md","hash":"eb282b7532644f405b65f7d14d7936252be19c91","modified":1470467554589,"shasum":"eb282b7532644f405b65f7d14d7936252be19c91"},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"a7faab4f3601b28107af5b1095b3966c2f88fec8","modified":1470466938551,"shasum":"a7faab4f3601b28107af5b1095b3966c2f88fec8"},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1470466938553,"shasum":"5062c723721d8497eebad372f57092ade45041f4"},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"29849f7d8f34acf80fc1a2bfd11a935581c32e3d","modified":1470466938559,"shasum":"29849f7d8f34acf80fc1a2bfd11a935581c32e3d"},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"65bf933f4b87bbda41eefae52ac1a1cde00deee9","modified":1470466938561,"shasum":"65bf933f4b87bbda41eefae52ac1a1cde00deee9"},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"e440311811c74c20cbdf70f6fd44fd4855d059ae","modified":1470466938555,"shasum":"e440311811c74c20cbdf70f6fd44fd4855d059ae"},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1470466938562,"shasum":"b69855e07b65117769adc515cb64b803932068c9"},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"65aa372bd0c8fcbdaed802aa7d03a35bc5a39eb8","modified":1470466938557,"shasum":"65aa372bd0c8fcbdaed802aa7d03a35bc5a39eb8"},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1470466938560,"shasum":"1ccc627d7697e68fddc367c73ac09920457e5b35"},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"88e191e3d14541299ed03b9a45be70974df51143","modified":1470466938578,"shasum":"88e191e3d14541299ed03b9a45be70974df51143"},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1470466938564,"shasum":"347cf1befd2ea637c24bd5901929d8e36e359e75"},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"4d3f92e3cd652cb69d71e40d1c64b2369922ca26","modified":1470466938579,"shasum":"4d3f92e3cd652cb69d71e40d1c64b2369922ca26"},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1470466938576,"shasum":"c70869569749a8f48cce202fa57926c06b55fdab"},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"d6591c745402fbc600e682830a343f732e336e4f","modified":1470466938581,"shasum":"d6591c745402fbc600e682830a343f732e336e4f"},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"7ba10fbd17b83b9b89eaea99bb78158d318c6d75","modified":1470466938583,"shasum":"7ba10fbd17b83b9b89eaea99bb78158d318c6d75"},{"_id":"themes/landscape/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1470466938612,"shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d"},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1470466938627,"shasum":"4a3e64ee8dad5834860c30b4176882eff628ca6b"},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"9028129dd2e56813197d0c38db5df8110aaeaabb","modified":1470466938585,"shasum":"9028129dd2e56813197d0c38db5df8110aaeaabb"},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470466938628,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470466938629,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470466938630,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470466938631,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470466938653,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1470466938664,"shasum":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c"},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1470466938665,"shasum":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8"},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1470466938666,"shasum":"2da892a02778236b64076e5e8802ef0566e1d9e8"},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1470466938670,"shasum":"c0d368681c687258b628bacc84cc30d353de6d47"},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470466938652,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1470466938596,"shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42"},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1470466938565,"shasum":"16128d2422645e18d1b6882d4c4df17d895bd76e"},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1470466938566,"shasum":"947f513f7a85fbcf085624e46dc2ae6de8185eec"},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1470466938567,"shasum":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca"},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1470466938570,"shasum":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07"},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"eb000d9d8a9ebd9087046fa019abe1cddae8fd9c","modified":1470466938568,"shasum":"eb000d9d8a9ebd9087046fa019abe1cddae8fd9c"},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1470466938600,"shasum":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7"},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1470466938573,"shasum":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf"},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1470466938601,"shasum":"2834870661e490775f9154d71638bfdc72e640a6"},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1470466938598,"shasum":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff"},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1470466938603,"shasum":"67e59feb18eee6026717cb440d86ab9551782628"},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"05da1b8f4859761dc60bca40b8682f167e350742","modified":1470466938605,"shasum":"05da1b8f4859761dc60bca40b8682f167e350742"},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1470466938602,"shasum":"6f7aa810f296d6a1a4486637b5a853d35a198938"},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1470466938606,"shasum":"680c7b809b62cd3ad294e822793fbd0b1a32cc33"},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1470466938606,"shasum":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985"},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"f6023861b2fbd858946e2108438b5f8f17586179","modified":1470466938607,"shasum":"f6023861b2fbd858946e2108438b5f8f17586179"},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1470466938609,"shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029"},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1470466938608,"shasum":"8d971a00e644a600179b04815688d188f094012e"},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470466938617,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1470466938610,"shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b"},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470466938615,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470466938623,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1470466938655,"shasum":"6394c48092085788a8c0ef72670b0652006231a1"},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470466938654,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1470466938657,"shasum":"4c9c395d705d22af7da06870d18f434e2a2eeaf9"},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1470466938659,"shasum":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454"},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1470466938661,"shasum":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae"},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1470466938662,"shasum":"83cdfea43632b613771691a11f56f99d85fb6dbd"},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470466938622,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1470466938620,"shasum":"a275426daefd3716c53561fad121d258a7f05b47"},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1470466938626,"shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9"},{"_id":"source/img/20150912041903.jpg","hash":"ddef4c11a9da31b2d67ae23f798c3f2606b95e57","modified":1470466938529,"shasum":"ddef4c11a9da31b2d67ae23f798c3f2606b95e57"},{"_id":"source/img/20150912062844.jpg","hash":"db0e474837d1a93730e3c453b2e638385a12ae51","modified":1470466938542,"shasum":"db0e474837d1a93730e3c453b2e638385a12ae51"},{"_id":"public/404.html","hash":"37718dbdf4cafb087975e8bdac57805815d5b8dc","modified":1470467572301},{"_id":"public/2015/09/12/Set-up-Peanut-Hull-for-Raspberry-Pi/index.html","hash":"28b265d1d064c8581971ac005913e07f100c022f","modified":1470467572485},{"_id":"public/2015/09/12/Set-up-nginx-for-hexo/index.html","hash":"c6d213f9b982b1f37bcf6f09213270d1a182e2b0","modified":1470467572501},{"_id":"public/2015/09/12/Set-up-the-Hexo-on-Raspberry-Pi/index.html","hash":"4eb37f4c07e4aa47f20a8813e0e9263f6cfdc049","modified":1470467572502},{"_id":"public/2015/09/12/new-toy-SanDisk-Ultra-16G-Class10-UHS-I/index.html","hash":"858c743bea75725637365ca3b0e2a6625e5deece","modified":1470467572502},{"_id":"public/2015/09/05/Resize-MAC-OS-X-Yosemite-Disk/index.html","hash":"a107e93eeb4f188ac9e35ac2fe6f08998d601049","modified":1470467572502},{"_id":"public/2015/09/05/restore-Yosemite-after-corrupted-by-grub2/index.html","hash":"6c25290ad9ace00a4b8c42b03606353b0634c6e0","modified":1470467572502},{"_id":"public/2015/08/30/fbinst-fbinstTool-no-menu问题/index.html","hash":"d6f0b9adb55c6d00f9459650771ab25577bbbac4","modified":1470467572502},{"_id":"public/2015/08/29/Install-clover-on-USB-stick/index.html","hash":"f6dbb65f3381fec361dc0603702a015e21fb1ca5","modified":1470467572503},{"_id":"public/2015/08/22/hello-new-home/index.html","hash":"4b186cda0af377a228dfa71d26bb88b144420726","modified":1470467572503},{"_id":"public/archives/index.html","hash":"fb5f82a25d0d03d095e2029387c2ae82848aadeb","modified":1470467572503},{"_id":"public/archives/page/2/index.html","hash":"c7839b5a2a794a03c4fbfa8de4bf2507122589e3","modified":1470467572503},{"_id":"public/archives/2015/index.html","hash":"e5207d9b4faf63ca523e8b134b9878d64d9511e5","modified":1470467572503},{"_id":"public/archives/2015/page/2/index.html","hash":"11430242be73dc80c7eb9edd63083f3151317781","modified":1470467572503},{"_id":"public/archives/2015/08/index.html","hash":"6417296e545b8b74a55b8ad95bc3e709b381cf75","modified":1470467572503},{"_id":"public/archives/2015/09/index.html","hash":"ef3b52e754ca34a0345a40c30b9ea8d3f4892338","modified":1470467572503},{"_id":"public/page/2/index.html","hash":"c11c2fc01787d50d072ebd7e4a33b53ad29956cc","modified":1470467572503},{"_id":"public/2015/09/20/Design-Patterns-Decorator-AOP-in-Python-and-C-C/index.html","hash":"dd4e24c6382e85861f15a31db94bd4abf065a632","modified":1470467572503},{"_id":"public/2015/09/10/cache-exercises-memory-read-optimization/index.html","hash":"778d949656c0f077971cfd68985e6869b9b95498","modified":1470467572503},{"_id":"public/index.html","hash":"1be582cd7b5523dd7c33c05e580b04d0a6b97d3a","modified":1470467572504},{"_id":"public/2016/08/06/2016-2016-08-06-work-on-the-cloud-thoroughly/index.html","hash":"8b78ce870c2259c4a9021ee10a46c88c50e0f974","modified":1470467572526},{"_id":"public/archives/2016/index.html","hash":"56b4f59f73d713f5c8c5816c9737589b70c91f7f","modified":1470467572526},{"_id":"public/archives/2016/08/index.html","hash":"8a4257bfda3d3e323ef52a6e2f702b5400041b07","modified":1470467572526},{"_id":"public/img/2015-08-30_113215.png","hash":"af691e0f8034c0c783ac1f6c9f4af2e87397ebfa","modified":1470467572539},{"_id":"public/img/2015-08-30_122425.png","hash":"815fa0d9e92cb33d5a634527c1fd7414816da924","modified":1470467572539},{"_id":"public/img/2015-08-30_113423.png","hash":"d6084ea40639e81858e4e073f24f4b715b0d20e9","modified":1470467572539},{"_id":"public/img/2015-09-10_130439.png","hash":"f9900510614de67f3e9c802e6b65f10143ed150f","modified":1470467572539},{"_id":"public/img/2015-09-12_035642.png","hash":"07c2dffbebcfb4494e3987cc7a51af218d513aa4","modified":1470467572539},{"_id":"public/img/2015-09-12_040514.png","hash":"6b32d0b25c62c11a6dea571ac2c5f787fbefa2f9","modified":1470467572539},{"_id":"public/img/2015-09-20_103325.png","hash":"60692d1a19e1b72e221e36e3d52ef4f688f21296","modified":1470467572540},{"_id":"public/img/2015-09-20_104140.png","hash":"2e83b38cf9f50a9402ec158d63d1d4e6490239de","modified":1470467572540},{"_id":"public/img/2015-09-12_050307.png","hash":"dc6399e060c431af2e37d9167c3e8389158bdd69","modified":1470467572540},{"_id":"public/img/2015-09-20_104818.png","hash":"fb68b3c2c8a8bceb3ba844636392bb7b76ad7874","modified":1470467572540},{"_id":"public/img/2015-09-13_174117.png","hash":"d00896e9b994c8517e8630460abcf5e132448bdb","modified":1470467572540},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470467572540},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470467572540},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470467572540},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470467572540},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470467572541},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1470467572541},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470467572541},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1470467572541},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470467572541},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1470467572541},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1470467573144},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1470467573163},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1470467573163},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470467573164},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470467573164},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470467573164},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470467573164},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470467573164},{"_id":"public/css/style.css","hash":"e9ae89d3eaf09b4fb3b48f3da5e58e74ea5875b0","modified":1470467573164},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1470467573164},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470467573164},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1470467573169},{"_id":"public/css/images/banner.jpg","hash":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1470467573169},{"_id":"public/img/20150912041903.jpg","hash":"ddef4c11a9da31b2d67ae23f798c3f2606b95e57","modified":1470467573194},{"_id":"public/img/20150912062844.jpg","hash":"db0e474837d1a93730e3c453b2e638385a12ae51","modified":1470467573199}],"Category":[],"Data":[],"Page":[{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>宝贝，公益404带你们回家</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"layout: false\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>宝贝，公益404带你们回家</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2016-08-06T07:02:18.493Z","updated":"2016-08-06T07:02:18.493Z","path":"404.html","_id":"ciriufask0000xop3sd70qo8x","title":"","comments":1,"content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>宝贝，公益404带你们回家</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>宝贝，公益404带你们回家</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"}],"Post":[{"title":"Blog架设总结","date":"2015-08-22T13:23:19.000Z","comments":1,"_content":"虽然有各种教程，折腾了一天才算能用起来，总结下:\n* repository必须是以如下的形式命名:\n> [**用户名**].github.io\n\n比如abc就是abc.github.io\nbranch名字必须是master，对于子目录下的站点，必须是gh-pages  \n* hexo generate生成的文件默认在public里面，需要复制到外面与_config.yaml同目录下。\n* 开始不知道在哪写文章，后来发现其实接着生成的md文件内容往下写就行了。。。\n* 采用markdown写作，所见即所得 \n\n相关引用：\n[Cmd Markdown](https://www.zybuluo.com/mdeditor)\n[Markdown简明介绍](http://wowubuntu.com/markdown)\n[Markdown代码块支持的语言](https://github.com/coapp/coapp.org/blob/master/src/dynamic/reference/garrett-flavored-markdown.html.md#precode)\n","source":"_posts/2015-08-22-hello-new-home.md","raw":"title: Blog架设总结\ndate: 2015-08-22 21:23:19\ncomments: true\n---\n虽然有各种教程，折腾了一天才算能用起来，总结下:\n* repository必须是以如下的形式命名:\n> [**用户名**].github.io\n\n比如abc就是abc.github.io\nbranch名字必须是master，对于子目录下的站点，必须是gh-pages  \n* hexo generate生成的文件默认在public里面，需要复制到外面与_config.yaml同目录下。\n* 开始不知道在哪写文章，后来发现其实接着生成的md文件内容往下写就行了。。。\n* 采用markdown写作，所见即所得 \n\n相关引用：\n[Cmd Markdown](https://www.zybuluo.com/mdeditor)\n[Markdown简明介绍](http://wowubuntu.com/markdown)\n[Markdown代码块支持的语言](https://github.com/coapp/coapp.org/blob/master/src/dynamic/reference/garrett-flavored-markdown.html.md#precode)\n","slug":"hello-new-home","published":1,"updated":"2016-08-06T07:02:18.495Z","_id":"ciriufatk0001xop30ti9od8a","layout":"post","photos":[],"link":"","content":"<p>虽然有各种教程，折腾了一天才算能用起来，总结下:</p>\n<ul>\n<li>repository必须是以如下的形式命名:<blockquote>\n<p>[<strong>用户名</strong>].github.io</p>\n</blockquote>\n</li>\n</ul>\n<p>比如abc就是abc.github.io<br>branch名字必须是master，对于子目录下的站点，必须是gh-pages  </p>\n<ul>\n<li>hexo generate生成的文件默认在public里面，需要复制到外面与_config.yaml同目录下。</li>\n<li>开始不知道在哪写文章，后来发现其实接着生成的md文件内容往下写就行了。。。</li>\n<li>采用markdown写作，所见即所得 </li>\n</ul>\n<p>相关引用：<br><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">Cmd Markdown</a><br><a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"external\">Markdown简明介绍</a><br><a href=\"https://github.com/coapp/coapp.org/blob/master/src/dynamic/reference/garrett-flavored-markdown.html.md#precode\" target=\"_blank\" rel=\"external\">Markdown代码块支持的语言</a></p>\n","excerpt":"","more":"<p>虽然有各种教程，折腾了一天才算能用起来，总结下:</p>\n<ul>\n<li>repository必须是以如下的形式命名:<blockquote>\n<p>[<strong>用户名</strong>].github.io</p>\n</blockquote>\n</li>\n</ul>\n<p>比如abc就是abc.github.io<br>branch名字必须是master，对于子目录下的站点，必须是gh-pages  </p>\n<ul>\n<li>hexo generate生成的文件默认在public里面，需要复制到外面与_config.yaml同目录下。</li>\n<li>开始不知道在哪写文章，后来发现其实接着生成的md文件内容往下写就行了。。。</li>\n<li>采用markdown写作，所见即所得 </li>\n</ul>\n<p>相关引用：<br><a href=\"https://www.zybuluo.com/mdeditor\">Cmd Markdown</a><br><a href=\"http://wowubuntu.com/markdown\">Markdown简明介绍</a><br><a href=\"https://github.com/coapp/coapp.org/blob/master/src/dynamic/reference/garrett-flavored-markdown.html.md#precode\">Markdown代码块支持的语言</a></p>\n"},{"title":"Install clover on USB stick","date":"2015-08-29T09:46:56.000Z","category":null,"_content":"clover支持UEFI和legacy两种BIOS启动，并且可以随意搭配GPT分区和MBR分区安装的系统，但是需要调教参数。\n首先有一些概念要区别。\nWe can boot from a UEFI system and install Windows in UEFI\\GPT mode, or boot in BIOS\\CSM mode and install Windows in MBR mode.","source":"_posts/2015-08-29-Install-clover-on-USB-stick.md","raw":"title: Install clover on USB stick\ndate: 2015-08-29 17:46:56\ntags:\ncategory:\n---\nclover支持UEFI和legacy两种BIOS启动，并且可以随意搭配GPT分区和MBR分区安装的系统，但是需要调教参数。\n首先有一些概念要区别。\nWe can boot from a UEFI system and install Windows in UEFI\\GPT mode, or boot in BIOS\\CSM mode and install Windows in MBR mode.","slug":"Install-clover-on-USB-stick","published":1,"updated":"2016-08-06T07:02:18.495Z","_id":"ciriufatq0002xop3vik050qs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>clover支持UEFI和legacy两种BIOS启动，并且可以随意搭配GPT分区和MBR分区安装的系统，但是需要调教参数。<br>首先有一些概念要区别。<br>We can boot from a UEFI system and install Windows in UEFI\\GPT mode, or boot in BIOS\\CSM mode and install Windows in MBR mode.</p>\n","excerpt":"","more":"<p>clover支持UEFI和legacy两种BIOS启动，并且可以随意搭配GPT分区和MBR分区安装的系统，但是需要调教参数。<br>首先有一些概念要区别。<br>We can boot from a UEFI system and install Windows in UEFI\\GPT mode, or boot in BIOS\\CSM mode and install Windows in MBR mode.</p>\n"},{"title":"Resize MAC OS X (Yosemite) Disk","date":"2015-09-04T18:58:20.000Z","category":null,"_content":"### 调整MAC OS X系统所在分区大小\n\n开始安装Yosemite时，划分的分区过小，安装Xcode和IOS SDK时磁盘已经不够。作为爱偷懒的程序员，自然是能不重新安装最好不重装。\n\n第一个想到的办法是Windows时代常用的Ghost。首先新划分一个合适大小的分区，格式不格式化无所谓，设置分区为激活状态。这里推荐分区助手，无损调节分区大小。\n然后USB启动到PE，Ghost搬移partition，全程无压力。完成后启动新的Yosemite分区，发现分区大小也复制了过来。此法不通。\n\n很快发现，Yosemite自带有Disk Utility，里面有Restore功能，专业系统搬移！Apple简直是太有预见性！\n所以只要把原来的分区内容restore到一个更大的分区，就等于调节了分区大小。\n不过要搬移的disk在Yosemite启动后就不能操作了，所以要从Yosemite的安装盘启动，里面也有这个工具。而且速度比Ghost还要快的多，3分钟搞定。","source":"_posts/2015-09-05-Resize-MAC-OS-X-Yosemite-Disk.md","raw":"title: Resize MAC OS X (Yosemite) Disk\ndate: 2015-09-05 02:58:20\ntags:\ncategory:\n---\n### 调整MAC OS X系统所在分区大小\n\n开始安装Yosemite时，划分的分区过小，安装Xcode和IOS SDK时磁盘已经不够。作为爱偷懒的程序员，自然是能不重新安装最好不重装。\n\n第一个想到的办法是Windows时代常用的Ghost。首先新划分一个合适大小的分区，格式不格式化无所谓，设置分区为激活状态。这里推荐分区助手，无损调节分区大小。\n然后USB启动到PE，Ghost搬移partition，全程无压力。完成后启动新的Yosemite分区，发现分区大小也复制了过来。此法不通。\n\n很快发现，Yosemite自带有Disk Utility，里面有Restore功能，专业系统搬移！Apple简直是太有预见性！\n所以只要把原来的分区内容restore到一个更大的分区，就等于调节了分区大小。\n不过要搬移的disk在Yosemite启动后就不能操作了，所以要从Yosemite的安装盘启动，里面也有这个工具。而且速度比Ghost还要快的多，3分钟搞定。","slug":"Resize-MAC-OS-X-Yosemite-Disk","published":1,"updated":"2016-08-06T07:02:18.497Z","_id":"ciriufatt0003xop3ix9zs7bd","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"调整MAC_OS_X系统所在分区大小\">调整MAC OS X系统所在分区大小</h3><p>开始安装Yosemite时，划分的分区过小，安装Xcode和IOS SDK时磁盘已经不够。作为爱偷懒的程序员，自然是能不重新安装最好不重装。</p>\n<p>第一个想到的办法是Windows时代常用的Ghost。首先新划分一个合适大小的分区，格式不格式化无所谓，设置分区为激活状态。这里推荐分区助手，无损调节分区大小。<br>然后USB启动到PE，Ghost搬移partition，全程无压力。完成后启动新的Yosemite分区，发现分区大小也复制了过来。此法不通。</p>\n<p>很快发现，Yosemite自带有Disk Utility，里面有Restore功能，专业系统搬移！Apple简直是太有预见性！<br>所以只要把原来的分区内容restore到一个更大的分区，就等于调节了分区大小。<br>不过要搬移的disk在Yosemite启动后就不能操作了，所以要从Yosemite的安装盘启动，里面也有这个工具。而且速度比Ghost还要快的多，3分钟搞定。</p>\n","excerpt":"","more":"<h3 id=\"调整MAC_OS_X系统所在分区大小\">调整MAC OS X系统所在分区大小</h3><p>开始安装Yosemite时，划分的分区过小，安装Xcode和IOS SDK时磁盘已经不够。作为爱偷懒的程序员，自然是能不重新安装最好不重装。</p>\n<p>第一个想到的办法是Windows时代常用的Ghost。首先新划分一个合适大小的分区，格式不格式化无所谓，设置分区为激活状态。这里推荐分区助手，无损调节分区大小。<br>然后USB启动到PE，Ghost搬移partition，全程无压力。完成后启动新的Yosemite分区，发现分区大小也复制了过来。此法不通。</p>\n<p>很快发现，Yosemite自带有Disk Utility，里面有Restore功能，专业系统搬移！Apple简直是太有预见性！<br>所以只要把原来的分区内容restore到一个更大的分区，就等于调节了分区大小。<br>不过要搬移的disk在Yosemite启动后就不能操作了，所以要从Yosemite的安装盘启动，里面也有这个工具。而且速度比Ghost还要快的多，3分钟搞定。</p>\n"},{"title":"fbinst/fbinstTool no menu问题","date":"2015-08-30T03:30:40.000Z","category":null,"_content":"安利下，fbinst是个万能启动盘制作工具，能引导多种类型系统，网管必备。。。\n使用fbinstTool制作启动盘时，碰到无法启动引导程序问题，提示\"no menu\"信息。\n\n![错误提示](/img/2015-08-30_113215.png)\n\ngoogle搜索没有结果，只好尝试自己排查问题。首先fbinst是个[开源程序](http://download.gna.org/grubutil/)，因此最简单办法就是看代码为何出现如此错误。\n搜索no menu，可以看到相关代码在fbmbr.S\n```\n\tmovb\t$FBM_TYPE_MENU, %cl\n\tcall\tfind_first_item\n\n1:\n\tjc\t1f\n\tsubb\t$1, %bl\n\tjc\tboot_item\n\tcall\tfind_next_item\n\tjmp\t1b\n\n1:\n\tmovw\t$ABS(err_no_menu), %si\n\tjmp\tfail\n\t\n\t...\n\nerr_no_menu:\n\t.ascii\t\"no menu\\0\"\n```\n可以看到是在查找FBM_TYPE_MENU这个类型的数据时失败所致，继续回溯调用路径，可以看到这部分代码在parse_menu label下，而调用parse_menu的地方只有一个\n```\n\tmovw\t$ABS(menu_file), %si\n\tpushw\t%si\n\tcall\tcheck_file\n\tpopw\t%si\n\tjc\t1f\n\tcall\tload_file\n\tjmp\tparse_menu\n\t\n\t...\n\t\n\tmenu_file:\n\t.ascii\tFB_MENU_FILE \"\\0\"\n```\nFB_MENU_FILE就是要查找的目标，看看它是什么，搜索可以发现其定义在fbinst.h，`#define FB_MENU_FILE\t\t\"fb.cfg\"`\n所以问题是这个文件找不到，这个文件其实是有的，它就是fbinst菜单\n\n![fbinst菜单](/img/2015-08-30_122425.png)\n原来默认启动项指向了一个不存在的条目，这才想起来因为之前配置过其它引导条目，后又删除忘记恢复default所致。。。\n修改后，正常启动。\n![正常启动](/img/2015-08-30_113423.png)\n","source":"_posts/2015-08-30-fbinst-fbinstTool-no-menu问题.md","raw":"title: fbinst/fbinstTool no menu问题\ndate: 2015-08-30 11:30:40\ntags:\ncategory:\n---\n安利下，fbinst是个万能启动盘制作工具，能引导多种类型系统，网管必备。。。\n使用fbinstTool制作启动盘时，碰到无法启动引导程序问题，提示\"no menu\"信息。\n\n![错误提示](/img/2015-08-30_113215.png)\n\ngoogle搜索没有结果，只好尝试自己排查问题。首先fbinst是个[开源程序](http://download.gna.org/grubutil/)，因此最简单办法就是看代码为何出现如此错误。\n搜索no menu，可以看到相关代码在fbmbr.S\n```\n\tmovb\t$FBM_TYPE_MENU, %cl\n\tcall\tfind_first_item\n\n1:\n\tjc\t1f\n\tsubb\t$1, %bl\n\tjc\tboot_item\n\tcall\tfind_next_item\n\tjmp\t1b\n\n1:\n\tmovw\t$ABS(err_no_menu), %si\n\tjmp\tfail\n\t\n\t...\n\nerr_no_menu:\n\t.ascii\t\"no menu\\0\"\n```\n可以看到是在查找FBM_TYPE_MENU这个类型的数据时失败所致，继续回溯调用路径，可以看到这部分代码在parse_menu label下，而调用parse_menu的地方只有一个\n```\n\tmovw\t$ABS(menu_file), %si\n\tpushw\t%si\n\tcall\tcheck_file\n\tpopw\t%si\n\tjc\t1f\n\tcall\tload_file\n\tjmp\tparse_menu\n\t\n\t...\n\t\n\tmenu_file:\n\t.ascii\tFB_MENU_FILE \"\\0\"\n```\nFB_MENU_FILE就是要查找的目标，看看它是什么，搜索可以发现其定义在fbinst.h，`#define FB_MENU_FILE\t\t\"fb.cfg\"`\n所以问题是这个文件找不到，这个文件其实是有的，它就是fbinst菜单\n\n![fbinst菜单](/img/2015-08-30_122425.png)\n原来默认启动项指向了一个不存在的条目，这才想起来因为之前配置过其它引导条目，后又删除忘记恢复default所致。。。\n修改后，正常启动。\n![正常启动](/img/2015-08-30_113423.png)\n","slug":"fbinst-fbinstTool-no-menu问题","published":1,"updated":"2016-08-06T07:02:18.496Z","_id":"ciriufatx0004xop35cka0pja","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安利下，fbinst是个万能启动盘制作工具，能引导多种类型系统，网管必备。。。<br>使用fbinstTool制作启动盘时，碰到无法启动引导程序问题，提示”no menu”信息。</p>\n<p><img src=\"/img/2015-08-30_113215.png\" alt=\"错误提示\"></p>\n<p>google搜索没有结果，只好尝试自己排查问题。首先fbinst是个<a href=\"http://download.gna.org/grubutil/\" target=\"_blank\" rel=\"external\">开源程序</a>，因此最简单办法就是看代码为何出现如此错误。<br>搜索no menu，可以看到相关代码在fbmbr.S<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tmovb\t$FBM_TYPE_MENU, %cl</div><div class=\"line\">\t<span class=\"keyword\">call</span>\tfind_first_item</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>:</div><div class=\"line\">\t<span class=\"keyword\">jc</span>\t1f</div><div class=\"line\">\tsubb\t<span class=\"number\">$1</span>, %bl</div><div class=\"line\">\t<span class=\"keyword\">jc</span>\tboot_item</div><div class=\"line\">\t<span class=\"keyword\">call</span>\tfind_next_item</div><div class=\"line\">\t<span class=\"keyword\">jmp</span>\t<span class=\"number\">1b</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>:</div><div class=\"line\">\tmovw\t$<span class=\"built_in\">ABS</span>(err_no_menu), %si</div><div class=\"line\">\t<span class=\"keyword\">jmp</span>\tfail</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">err_no_menu:</div><div class=\"line\"><span class=\"meta\">\t.ascii</span>\t<span class=\"string\">\"no menu\\0\"</span></div></pre></td></tr></table></figure></p>\n<p>可以看到是在查找FBM_TYPE_MENU这个类型的数据时失败所致，继续回溯调用路径，可以看到这部分代码在parse_menu label下，而调用parse_menu的地方只有一个<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">movw\t$<span class=\"built_in\">ABS</span>(menu_file), %si</div><div class=\"line\">pushw\t%si</div><div class=\"line\"><span class=\"keyword\">call</span>\tcheck_file</div><div class=\"line\">popw\t%si</div><div class=\"line\"><span class=\"keyword\">jc</span>\t1f</div><div class=\"line\"><span class=\"keyword\">call</span>\tload_file</div><div class=\"line\"><span class=\"keyword\">jmp</span>\tparse_menu</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"symbol\"></span></div><div class=\"line\">menu_file:</div><div class=\"line\"><span class=\"meta\">.ascii</span>\tFB_MENU_FILE <span class=\"string\">\"\\0\"</span></div></pre></td></tr></table></figure></p>\n<p>FB_MENU_FILE就是要查找的目标，看看它是什么，搜索可以发现其定义在fbinst.h，<code>#define FB_MENU_FILE        &quot;fb.cfg&quot;</code><br>所以问题是这个文件找不到，这个文件其实是有的，它就是fbinst菜单</p>\n<p><img src=\"/img/2015-08-30_122425.png\" alt=\"fbinst菜单\"><br>原来默认启动项指向了一个不存在的条目，这才想起来因为之前配置过其它引导条目，后又删除忘记恢复default所致。。。<br>修改后，正常启动。<br><img src=\"/img/2015-08-30_113423.png\" alt=\"正常启动\"></p>\n","excerpt":"","more":"<p>安利下，fbinst是个万能启动盘制作工具，能引导多种类型系统，网管必备。。。<br>使用fbinstTool制作启动盘时，碰到无法启动引导程序问题，提示”no menu”信息。</p>\n<p><img src=\"/img/2015-08-30_113215.png\" alt=\"错误提示\"></p>\n<p>google搜索没有结果，只好尝试自己排查问题。首先fbinst是个<a href=\"http://download.gna.org/grubutil/\">开源程序</a>，因此最简单办法就是看代码为何出现如此错误。<br>搜索no menu，可以看到相关代码在fbmbr.S<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tmovb\t$FBM_TYPE_MENU, %cl</div><div class=\"line\">\t<span class=\"keyword\">call</span>\tfind_first_item</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>:</div><div class=\"line\">\t<span class=\"keyword\">jc</span>\t1f</div><div class=\"line\">\tsubb\t<span class=\"number\">$1</span>, %bl</div><div class=\"line\">\t<span class=\"keyword\">jc</span>\tboot_item</div><div class=\"line\">\t<span class=\"keyword\">call</span>\tfind_next_item</div><div class=\"line\">\t<span class=\"keyword\">jmp</span>\t<span class=\"number\">1b</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1</span>:</div><div class=\"line\">\tmovw\t$<span class=\"built_in\">ABS</span>(err_no_menu), %si</div><div class=\"line\">\t<span class=\"keyword\">jmp</span>\tfail</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\"><span class=\"symbol\"></div><div class=\"line\">err_no_menu:</span></div><div class=\"line\"><span class=\"meta\">\t.ascii</span>\t<span class=\"string\">\"no menu\\0\"</span></div></pre></td></tr></table></figure></p>\n<p>可以看到是在查找FBM_TYPE_MENU这个类型的数据时失败所致，继续回溯调用路径，可以看到这部分代码在parse_menu label下，而调用parse_menu的地方只有一个<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">movw\t$<span class=\"built_in\">ABS</span>(menu_file), %si</div><div class=\"line\">pushw\t%si</div><div class=\"line\"><span class=\"keyword\">call</span>\tcheck_file</div><div class=\"line\">popw\t%si</div><div class=\"line\"><span class=\"keyword\">jc</span>\t1f</div><div class=\"line\"><span class=\"keyword\">call</span>\tload_file</div><div class=\"line\"><span class=\"keyword\">jmp</span>\tparse_menu</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"><span class=\"symbol\"></div><div class=\"line\">menu_file:</span></div><div class=\"line\"><span class=\"meta\">.ascii</span>\tFB_MENU_FILE <span class=\"string\">\"\\0\"</span></div></pre></td></tr></table></figure></p>\n<p>FB_MENU_FILE就是要查找的目标，看看它是什么，搜索可以发现其定义在fbinst.h，<code>#define FB_MENU_FILE        &quot;fb.cfg&quot;</code><br>所以问题是这个文件找不到，这个文件其实是有的，它就是fbinst菜单</p>\n<p><img src=\"/img/2015-08-30_122425.png\" alt=\"fbinst菜单\"><br>原来默认启动项指向了一个不存在的条目，这才想起来因为之前配置过其它引导条目，后又删除忘记恢复default所致。。。<br>修改后，正常启动。<br><img src=\"/img/2015-08-30_113423.png\" alt=\"正常启动\"></p>\n"},{"title":"Restore Yosemite after corrupted by grub2","date":"2015-09-04T17:45:14.000Z","category":null,"_content":"### 被GRUB2破坏MBR后Yosemite的恢复\n\n之前已经成功安装了Yosemite到Thinkpad T420上，然而不幸的是，楼主手贱在玩Ubuntu 14.04时把grub2安装到了所有硬盘上。\n不得不吐槽Linux系统桌面软件不如Windows成熟，这么重要的操作，Ubuntu自带的这个grub2配置GUI程序，在应用修改时居然没有一声提示，所有tab下的设置都统统设了下去。欲哭无泪。\n\n由于之前已经成功安装Yosemite，而Grub2理论上只会破坏MBR以及MBR到VBR之间的数据，所以只要恢复这部分数据就可以了。\n那么原来的这部分数据是什么呢，是Yosemite自己的bootloader，由于楼主之前用Multibeast安装了Chimera bootloader，所以首先要找到这个bootloader的boot0数据，即MBR数据。\n\n有两种办法可以拿到这个数据：\n1. 找到相应版本的Chimera pkg，这个文件可以用解压缩软件打开，在路径`Chimera 4.1.0.pkg\\chimeraV41.pkg\\Payload\\Payload~\\.\\usr\\standalone\\i386\\`\n下可以看到有四个文件：`boot`，`boot0`，`boot0md`，`boot1h`，boot是存放于HFS文件系统下的Chimera主体程序，boot0存放于MBR，boot1h存放于VBR，这几个文件的关系有兴趣的可以看[GRUB的维基介绍](https://en.wikipedia.org/wiki/GNU_GRUB)，原理一样。\n\n2. 另一个地方就在Yosemite系统里面，`/usr/standalone/i386`，里面也有这几个文件。\n\n找到这几个文件后，就可以动手实施恢复。**以下高能，模仿慎重**\n首先要独立于要操作的硬盘所在的系统进行操作，比如可以用USB盘启动PE，或者Yosemite的安装盘，或者其它硬盘上的系统。否则会提示无法操作成功，目标硬盘被占用。\n楼主使用其他硬盘上的Ubuntu操作，使用最简单的dd指令即可恢复。\n`sudo dd if=/media/username/bakup/boot0 of=/dev/sdc bs=440 count=1`\n里面的路径注意替换成自己的，440字节是为了避免把分区表覆盖，同时还要保留分区表前面6个字节的磁盘签名。关于MBR可以猛戳[MBR维基](https://en.wikipedia.org/wiki/Master_boot_record)。\n最后，注意要把活动分区设为Yosemite所在的分区，这个boot0，似乎只认活动分区，不认HFS分区。","source":"_posts/2015-09-05-restore-Yosemite-after-corrupted-by-grub2.md","raw":"title: Restore Yosemite after corrupted by grub2\ndate: 2015-09-05 01:45:14\ntags:\ncategory:\n---\n### 被GRUB2破坏MBR后Yosemite的恢复\n\n之前已经成功安装了Yosemite到Thinkpad T420上，然而不幸的是，楼主手贱在玩Ubuntu 14.04时把grub2安装到了所有硬盘上。\n不得不吐槽Linux系统桌面软件不如Windows成熟，这么重要的操作，Ubuntu自带的这个grub2配置GUI程序，在应用修改时居然没有一声提示，所有tab下的设置都统统设了下去。欲哭无泪。\n\n由于之前已经成功安装Yosemite，而Grub2理论上只会破坏MBR以及MBR到VBR之间的数据，所以只要恢复这部分数据就可以了。\n那么原来的这部分数据是什么呢，是Yosemite自己的bootloader，由于楼主之前用Multibeast安装了Chimera bootloader，所以首先要找到这个bootloader的boot0数据，即MBR数据。\n\n有两种办法可以拿到这个数据：\n1. 找到相应版本的Chimera pkg，这个文件可以用解压缩软件打开，在路径`Chimera 4.1.0.pkg\\chimeraV41.pkg\\Payload\\Payload~\\.\\usr\\standalone\\i386\\`\n下可以看到有四个文件：`boot`，`boot0`，`boot0md`，`boot1h`，boot是存放于HFS文件系统下的Chimera主体程序，boot0存放于MBR，boot1h存放于VBR，这几个文件的关系有兴趣的可以看[GRUB的维基介绍](https://en.wikipedia.org/wiki/GNU_GRUB)，原理一样。\n\n2. 另一个地方就在Yosemite系统里面，`/usr/standalone/i386`，里面也有这几个文件。\n\n找到这几个文件后，就可以动手实施恢复。**以下高能，模仿慎重**\n首先要独立于要操作的硬盘所在的系统进行操作，比如可以用USB盘启动PE，或者Yosemite的安装盘，或者其它硬盘上的系统。否则会提示无法操作成功，目标硬盘被占用。\n楼主使用其他硬盘上的Ubuntu操作，使用最简单的dd指令即可恢复。\n`sudo dd if=/media/username/bakup/boot0 of=/dev/sdc bs=440 count=1`\n里面的路径注意替换成自己的，440字节是为了避免把分区表覆盖，同时还要保留分区表前面6个字节的磁盘签名。关于MBR可以猛戳[MBR维基](https://en.wikipedia.org/wiki/Master_boot_record)。\n最后，注意要把活动分区设为Yosemite所在的分区，这个boot0，似乎只认活动分区，不认HFS分区。","slug":"restore-Yosemite-after-corrupted-by-grub2","published":1,"updated":"2016-08-06T07:02:18.498Z","_id":"ciriufau10005xop37reu4a47","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"被GRUB2破坏MBR后Yosemite的恢复\">被GRUB2破坏MBR后Yosemite的恢复</h3><p>之前已经成功安装了Yosemite到Thinkpad T420上，然而不幸的是，楼主手贱在玩Ubuntu 14.04时把grub2安装到了所有硬盘上。<br>不得不吐槽Linux系统桌面软件不如Windows成熟，这么重要的操作，Ubuntu自带的这个grub2配置GUI程序，在应用修改时居然没有一声提示，所有tab下的设置都统统设了下去。欲哭无泪。</p>\n<p>由于之前已经成功安装Yosemite，而Grub2理论上只会破坏MBR以及MBR到VBR之间的数据，所以只要恢复这部分数据就可以了。<br>那么原来的这部分数据是什么呢，是Yosemite自己的bootloader，由于楼主之前用Multibeast安装了Chimera bootloader，所以首先要找到这个bootloader的boot0数据，即MBR数据。</p>\n<p>有两种办法可以拿到这个数据：</p>\n<ol>\n<li><p>找到相应版本的Chimera pkg，这个文件可以用解压缩软件打开，在路径<code>Chimera 4.1.0.pkg\\chimeraV41.pkg\\Payload\\Payload~\\.\\usr\\standalone\\i386\\</code><br>下可以看到有四个文件：<code>boot</code>，<code>boot0</code>，<code>boot0md</code>，<code>boot1h</code>，boot是存放于HFS文件系统下的Chimera主体程序，boot0存放于MBR，boot1h存放于VBR，这几个文件的关系有兴趣的可以看<a href=\"https://en.wikipedia.org/wiki/GNU_GRUB\" target=\"_blank\" rel=\"external\">GRUB的维基介绍</a>，原理一样。</p>\n</li>\n<li><p>另一个地方就在Yosemite系统里面，<code>/usr/standalone/i386</code>，里面也有这几个文件。</p>\n</li>\n</ol>\n<p>找到这几个文件后，就可以动手实施恢复。<strong>以下高能，模仿慎重</strong><br>首先要独立于要操作的硬盘所在的系统进行操作，比如可以用USB盘启动PE，或者Yosemite的安装盘，或者其它硬盘上的系统。否则会提示无法操作成功，目标硬盘被占用。<br>楼主使用其他硬盘上的Ubuntu操作，使用最简单的dd指令即可恢复。<br><code>sudo dd if=/media/username/bakup/boot0 of=/dev/sdc bs=440 count=1</code><br>里面的路径注意替换成自己的，440字节是为了避免把分区表覆盖，同时还要保留分区表前面6个字节的磁盘签名。关于MBR可以猛戳<a href=\"https://en.wikipedia.org/wiki/Master_boot_record\" target=\"_blank\" rel=\"external\">MBR维基</a>。<br>最后，注意要把活动分区设为Yosemite所在的分区，这个boot0，似乎只认活动分区，不认HFS分区。</p>\n","excerpt":"","more":"<h3 id=\"被GRUB2破坏MBR后Yosemite的恢复\">被GRUB2破坏MBR后Yosemite的恢复</h3><p>之前已经成功安装了Yosemite到Thinkpad T420上，然而不幸的是，楼主手贱在玩Ubuntu 14.04时把grub2安装到了所有硬盘上。<br>不得不吐槽Linux系统桌面软件不如Windows成熟，这么重要的操作，Ubuntu自带的这个grub2配置GUI程序，在应用修改时居然没有一声提示，所有tab下的设置都统统设了下去。欲哭无泪。</p>\n<p>由于之前已经成功安装Yosemite，而Grub2理论上只会破坏MBR以及MBR到VBR之间的数据，所以只要恢复这部分数据就可以了。<br>那么原来的这部分数据是什么呢，是Yosemite自己的bootloader，由于楼主之前用Multibeast安装了Chimera bootloader，所以首先要找到这个bootloader的boot0数据，即MBR数据。</p>\n<p>有两种办法可以拿到这个数据：</p>\n<ol>\n<li><p>找到相应版本的Chimera pkg，这个文件可以用解压缩软件打开，在路径<code>Chimera 4.1.0.pkg\\chimeraV41.pkg\\Payload\\Payload~\\.\\usr\\standalone\\i386\\</code><br>下可以看到有四个文件：<code>boot</code>，<code>boot0</code>，<code>boot0md</code>，<code>boot1h</code>，boot是存放于HFS文件系统下的Chimera主体程序，boot0存放于MBR，boot1h存放于VBR，这几个文件的关系有兴趣的可以看<a href=\"https://en.wikipedia.org/wiki/GNU_GRUB\">GRUB的维基介绍</a>，原理一样。</p>\n</li>\n<li><p>另一个地方就在Yosemite系统里面，<code>/usr/standalone/i386</code>，里面也有这几个文件。</p>\n</li>\n</ol>\n<p>找到这几个文件后，就可以动手实施恢复。<strong>以下高能，模仿慎重</strong><br>首先要独立于要操作的硬盘所在的系统进行操作，比如可以用USB盘启动PE，或者Yosemite的安装盘，或者其它硬盘上的系统。否则会提示无法操作成功，目标硬盘被占用。<br>楼主使用其他硬盘上的Ubuntu操作，使用最简单的dd指令即可恢复。<br><code>sudo dd if=/media/username/bakup/boot0 of=/dev/sdc bs=440 count=1</code><br>里面的路径注意替换成自己的，440字节是为了避免把分区表覆盖，同时还要保留分区表前面6个字节的磁盘签名。关于MBR可以猛戳<a href=\"https://en.wikipedia.org/wiki/Master_boot_record\">MBR维基</a>。<br>最后，注意要把活动分区设为Yosemite所在的分区，这个boot0，似乎只认活动分区，不认HFS分区。</p>\n"},{"title":"Set up Oray DDNS for Raspberry Pi","date":"2015-09-12T13:45:53.000Z","category":null,"_content":"raspberry pi玩到后来不可避免会玩上DDNS，即[动态域名解析](https://en.wikipedia.org/wiki/Dynamic_DNS)，众所周知拨号上网拿到的公网IP每次可能不一样，为了从公网访问拨号猫后面的内网PC，需要外部提供一个查询机制，即DDNS，在这个外部查询系统注册一个域名之后，内部再装一个客户端，里应外合，把拨号拿到的公网IP通知给公网上的查询系统。这样公网用户每次要访问内网的PC，首先到这个确定地址的公网查询注册的域名，然后转换成对应的IP，从而达到访问内网PC的目的。\n关于如何在Raspberry Pi设置花生壳，官网已经有[介绍](http://service.oray.com/question/2680.html)。\n需要注意的是运行oraynewph需要root权限。\n\n**Update@2015-09-13**\n花生壳的免费域名实在太不好用，第一次成功更新A记录后，不管后面拨号再怎么重换地址，花生壳系统的A记录和路由的WAN地址始终不一致，还不能手动改。考虑到使用的电信网络，应该不存在ISP NAT的情况，折腾数天不妥，怒弃之。。。\n![死活不更新](/img/2015-09-13_174117.png)\n另外考虑到花生壳的免费域名，可能会被无聊人士盯上乱扫描，万一自家的路由器，树莓派等等有什么漏洞，城池难保。~~折衷的办法就是自己麻烦一点，让rapsberry pi主动email报告IP。后面完善了回来补充~~。鉴于ISP NAT的问题，WAN的IP也不是公网IP，这个方案也被否决了。\n**Update@2015-09-14**\n换了路由自带的花生壳客户端，同样的不一致问题，~~只能归咎于免费域名的故意限制。。。尝试其他DDNS服务。。。~~\n**Update@2015-09-14**\n3322也一样，ip138也显示这个地址，看来真的是有ISP NAT。。。\n**Update@2015-09-15**\n对于ISP NAT，花生壳官网介绍有[解决方案](http://service.oray.com/question/136.html)，只要你升到专业服务:(\n说实话这个解决方案只是重新选择了下接入线路，背后原理莫名其妙，貌似再没有其它家有类似的解决方案。\n初步搜索了下，在有ISP NAT的情况下，如果自己用，VPN不失为一个靠谱的解决方案。","source":"_posts/2015-09-12-Set-up-Peanut-Hull-for-Raspberry-Pi.md","raw":"title: Set up Oray DDNS for Raspberry Pi\ndate: 2015-09-12 21:45:53\ntags:\ncategory:\n---\nraspberry pi玩到后来不可避免会玩上DDNS，即[动态域名解析](https://en.wikipedia.org/wiki/Dynamic_DNS)，众所周知拨号上网拿到的公网IP每次可能不一样，为了从公网访问拨号猫后面的内网PC，需要外部提供一个查询机制，即DDNS，在这个外部查询系统注册一个域名之后，内部再装一个客户端，里应外合，把拨号拿到的公网IP通知给公网上的查询系统。这样公网用户每次要访问内网的PC，首先到这个确定地址的公网查询注册的域名，然后转换成对应的IP，从而达到访问内网PC的目的。\n关于如何在Raspberry Pi设置花生壳，官网已经有[介绍](http://service.oray.com/question/2680.html)。\n需要注意的是运行oraynewph需要root权限。\n\n**Update@2015-09-13**\n花生壳的免费域名实在太不好用，第一次成功更新A记录后，不管后面拨号再怎么重换地址，花生壳系统的A记录和路由的WAN地址始终不一致，还不能手动改。考虑到使用的电信网络，应该不存在ISP NAT的情况，折腾数天不妥，怒弃之。。。\n![死活不更新](/img/2015-09-13_174117.png)\n另外考虑到花生壳的免费域名，可能会被无聊人士盯上乱扫描，万一自家的路由器，树莓派等等有什么漏洞，城池难保。~~折衷的办法就是自己麻烦一点，让rapsberry pi主动email报告IP。后面完善了回来补充~~。鉴于ISP NAT的问题，WAN的IP也不是公网IP，这个方案也被否决了。\n**Update@2015-09-14**\n换了路由自带的花生壳客户端，同样的不一致问题，~~只能归咎于免费域名的故意限制。。。尝试其他DDNS服务。。。~~\n**Update@2015-09-14**\n3322也一样，ip138也显示这个地址，看来真的是有ISP NAT。。。\n**Update@2015-09-15**\n对于ISP NAT，花生壳官网介绍有[解决方案](http://service.oray.com/question/136.html)，只要你升到专业服务:(\n说实话这个解决方案只是重新选择了下接入线路，背后原理莫名其妙，貌似再没有其它家有类似的解决方案。\n初步搜索了下，在有ISP NAT的情况下，如果自己用，VPN不失为一个靠谱的解决方案。","slug":"Set-up-Peanut-Hull-for-Raspberry-Pi","published":1,"updated":"2016-08-06T07:02:18.499Z","_id":"ciriufau20006xop31dbcwaap","comments":1,"layout":"post","photos":[],"link":"","content":"<p>raspberry pi玩到后来不可避免会玩上DDNS，即<a href=\"https://en.wikipedia.org/wiki/Dynamic_DNS\" target=\"_blank\" rel=\"external\">动态域名解析</a>，众所周知拨号上网拿到的公网IP每次可能不一样，为了从公网访问拨号猫后面的内网PC，需要外部提供一个查询机制，即DDNS，在这个外部查询系统注册一个域名之后，内部再装一个客户端，里应外合，把拨号拿到的公网IP通知给公网上的查询系统。这样公网用户每次要访问内网的PC，首先到这个确定地址的公网查询注册的域名，然后转换成对应的IP，从而达到访问内网PC的目的。<br>关于如何在Raspberry Pi设置花生壳，官网已经有<a href=\"http://service.oray.com/question/2680.html\" target=\"_blank\" rel=\"external\">介绍</a>。<br>需要注意的是运行oraynewph需要root权限。</p>\n<p><strong>Update@2015-09-13</strong><br>花生壳的免费域名实在太不好用，第一次成功更新A记录后，不管后面拨号再怎么重换地址，花生壳系统的A记录和路由的WAN地址始终不一致，还不能手动改。考虑到使用的电信网络，应该不存在ISP NAT的情况，折腾数天不妥，怒弃之。。。<br><img src=\"/img/2015-09-13_174117.png\" alt=\"死活不更新\"><br>另外考虑到花生壳的免费域名，可能会被无聊人士盯上乱扫描，万一自家的路由器，树莓派等等有什么漏洞，城池难保。<del>折衷的办法就是自己麻烦一点，让rapsberry pi主动email报告IP。后面完善了回来补充</del>。鉴于ISP NAT的问题，WAN的IP也不是公网IP，这个方案也被否决了。<br><strong>Update@2015-09-14</strong><br>换了路由自带的花生壳客户端，同样的不一致问题，<del>只能归咎于免费域名的故意限制。。。尝试其他DDNS服务。。。</del><br><strong>Update@2015-09-14</strong><br>3322也一样，ip138也显示这个地址，看来真的是有ISP NAT。。。<br><strong>Update@2015-09-15</strong><br>对于ISP NAT，花生壳官网介绍有<a href=\"http://service.oray.com/question/136.html\" target=\"_blank\" rel=\"external\">解决方案</a>，只要你升到专业服务:(<br>说实话这个解决方案只是重新选择了下接入线路，背后原理莫名其妙，貌似再没有其它家有类似的解决方案。<br>初步搜索了下，在有ISP NAT的情况下，如果自己用，VPN不失为一个靠谱的解决方案。</p>\n","excerpt":"","more":"<p>raspberry pi玩到后来不可避免会玩上DDNS，即<a href=\"https://en.wikipedia.org/wiki/Dynamic_DNS\">动态域名解析</a>，众所周知拨号上网拿到的公网IP每次可能不一样，为了从公网访问拨号猫后面的内网PC，需要外部提供一个查询机制，即DDNS，在这个外部查询系统注册一个域名之后，内部再装一个客户端，里应外合，把拨号拿到的公网IP通知给公网上的查询系统。这样公网用户每次要访问内网的PC，首先到这个确定地址的公网查询注册的域名，然后转换成对应的IP，从而达到访问内网PC的目的。<br>关于如何在Raspberry Pi设置花生壳，官网已经有<a href=\"http://service.oray.com/question/2680.html\">介绍</a>。<br>需要注意的是运行oraynewph需要root权限。</p>\n<p><strong>Update@2015-09-13</strong><br>花生壳的免费域名实在太不好用，第一次成功更新A记录后，不管后面拨号再怎么重换地址，花生壳系统的A记录和路由的WAN地址始终不一致，还不能手动改。考虑到使用的电信网络，应该不存在ISP NAT的情况，折腾数天不妥，怒弃之。。。<br><img src=\"/img/2015-09-13_174117.png\" alt=\"死活不更新\"><br>另外考虑到花生壳的免费域名，可能会被无聊人士盯上乱扫描，万一自家的路由器，树莓派等等有什么漏洞，城池难保。<del>折衷的办法就是自己麻烦一点，让rapsberry pi主动email报告IP。后面完善了回来补充</del>。鉴于ISP NAT的问题，WAN的IP也不是公网IP，这个方案也被否决了。<br><strong>Update@2015-09-14</strong><br>换了路由自带的花生壳客户端，同样的不一致问题，<del>只能归咎于免费域名的故意限制。。。尝试其他DDNS服务。。。</del><br><strong>Update@2015-09-14</strong><br>3322也一样，ip138也显示这个地址，看来真的是有ISP NAT。。。<br><strong>Update@2015-09-15</strong><br>对于ISP NAT，花生壳官网介绍有<a href=\"http://service.oray.com/question/136.html\">解决方案</a>，只要你升到专业服务:(<br>说实话这个解决方案只是重新选择了下接入线路，背后原理莫名其妙，貌似再没有其它家有类似的解决方案。<br>初步搜索了下，在有ISP NAT的情况下，如果自己用，VPN不失为一个靠谱的解决方案。</p>\n"},{"title":"Set up nginx for Hexo","date":"2015-09-12T03:00:36.000Z","category":null,"_content":"hexo基于nodejs实现，本质上都是V8引擎解释js语句执行，效率必然比不上本地代码。在raspberry pi资源这么有限的环境下，hexo server不是个好主意，那么以速度著称的nginx就是个必然选择。\n```\nsudo apt-get install nginx\nsudo /etc/init.d/nginx start\nsudo /usr/sbin/update-rc.d -f nginx defaults\nsudo vi /etc/nginx/sites-enabled/default\n```\n找到server的配置，修改root目录\n```\nserver {\n    ...\n    server_name localhost;\n    index index.html index.htm;\n    root  /home/pi/hexo/public;\n    ...\n}\n```\n修改完后别忘了让nginx重新读取配置\n```\nsudo /etc/init.d/nginx reload\n```\n为了能根据blog源代码的改变及时更新public，可以让hexo在后台进行监视\n```\nhexo generate --watch\n```","source":"_posts/2015-09-12-Set-up-nginx-for-hexo.md","raw":"title: Set up nginx for Hexo\ndate: 2015-09-12 11:00:36\ntags:\ncategory:\n---\nhexo基于nodejs实现，本质上都是V8引擎解释js语句执行，效率必然比不上本地代码。在raspberry pi资源这么有限的环境下，hexo server不是个好主意，那么以速度著称的nginx就是个必然选择。\n```\nsudo apt-get install nginx\nsudo /etc/init.d/nginx start\nsudo /usr/sbin/update-rc.d -f nginx defaults\nsudo vi /etc/nginx/sites-enabled/default\n```\n找到server的配置，修改root目录\n```\nserver {\n    ...\n    server_name localhost;\n    index index.html index.htm;\n    root  /home/pi/hexo/public;\n    ...\n}\n```\n修改完后别忘了让nginx重新读取配置\n```\nsudo /etc/init.d/nginx reload\n```\n为了能根据blog源代码的改变及时更新public，可以让hexo在后台进行监视\n```\nhexo generate --watch\n```","slug":"Set-up-nginx-for-hexo","published":1,"updated":"2016-08-06T07:02:18.500Z","_id":"ciriufaud0007xop3ocgwntag","comments":1,"layout":"post","photos":[],"link":"","content":"<p>hexo基于nodejs实现，本质上都是V8引擎解释js语句执行，效率必然比不上本地代码。在raspberry pi资源这么有限的环境下，hexo server不是个好主意，那么以速度著称的nginx就是个必然选择。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nginx</div><div class=\"line\">sudo <span class=\"regexp\">/etc/</span>init.d/nginx start</div><div class=\"line\">sudo <span class=\"regexp\">/usr/</span>sbin/update-rc.d -f nginx defaults</div><div class=\"line\">sudo vi <span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/sites-enabled/</span><span class=\"keyword\">default</span></div></pre></td></tr></table></figure></p>\n<p>找到server的配置，修改root目录<br><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">server</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    server_name localhost;</div><div class=\"line\">    <span class=\"keyword\">index</span> <span class=\"keyword\">index</span>.html <span class=\"keyword\">index</span>.htm;</div><div class=\"line\">    root  /home/pi/hexo/<span class=\"keyword\">public</span>;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修改完后别忘了让nginx重新读取配置<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"meta-keyword\">/etc/</span>init.d/nginx reload</div></pre></td></tr></table></figure></p>\n<p>为了能根据blog源代码的改变及时更新public，可以让hexo在后台进行监视<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">generate</span> --watch</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>hexo基于nodejs实现，本质上都是V8引擎解释js语句执行，效率必然比不上本地代码。在raspberry pi资源这么有限的环境下，hexo server不是个好主意，那么以速度著称的nginx就是个必然选择。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nginx</div><div class=\"line\">sudo <span class=\"regexp\">/etc/</span>init.d/nginx start</div><div class=\"line\">sudo <span class=\"regexp\">/usr/</span>sbin/update-rc.d -f nginx defaults</div><div class=\"line\">sudo vi <span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/sites-enabled/</span><span class=\"keyword\">default</span></div></pre></td></tr></table></figure></p>\n<p>找到server的配置，修改root目录<br><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">server</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    server_name localhost;</div><div class=\"line\">    <span class=\"keyword\">index</span> <span class=\"keyword\">index</span>.html <span class=\"keyword\">index</span>.htm;</div><div class=\"line\">    root  /home/pi/hexo/<span class=\"keyword\">public</span>;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修改完后别忘了让nginx重新读取配置<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"meta-keyword\">/etc/</span>init.d/nginx reload</div></pre></td></tr></table></figure></p>\n<p>为了能根据blog源代码的改变及时更新public，可以让hexo在后台进行监视<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">generate</span> --watch</div></pre></td></tr></table></figure></p>\n"},{"title":"New Toy - SanDisk Ultra 16G Class10 UHS-I","date":"2015-09-11T20:10:32.000Z","category":null,"_content":"自从iPhone开启自带Flash Rom风潮以来，外置TF卡在手机上越来越不受待见，这次为了把吃灰多年的Raspberry Pi拿出来晒晒太阳，决心新入手一块TF卡。\n吐槽下京东可能除了物流价格上真心没啥优势。。。\n先来一张大头照\n![美照](/img/20150912041903.jpg)\n然后照例验证正品，没问题。\n测试读写速度\n![ATTO Disk BenchMark](/img/2015-09-12_035642.png)\n最大速度，读45MB/s，写17MB/s左右。比官网号称48MB/s稍显乏力。。。\n写入Raspberry Pi image\n![Win32 Disk Imager](/img/2015-09-12_040514.png)\n写入速度差不多在15~16MB/s。\n\n附上对比测试，金士顿未知Class卡\n![Kinston unknown TF](/img/20150912062844.jpg)\n速度测试\n![ATTO Disk BenchMark](/img/2015-09-12_050307.png)\n看起来应该也是Class 10级别的卡。\n~~Raspberry Pi板载速度测试敬请期待。。。~~\n接上文接着测试Raspberry Pi上，方法简单粗暴，就是dd拷贝测试：\n写\n```\ndd if=/dev/zero of=~/test.tmp bs=500K count=1024\n524288000 bytes (524 MB) copied, 36.7958 s, 14.2 MB/s\n```\n读\n```\ndd if=~/test.tmp of=/dev/null bs=500K count=1024\n524288000 bytes (524 MB) copied, 28.128 s, 18.6 MB/s\n```\n这个数据与官方同款测试基本一致（详见下方链接），猜测受限于raspberry pi的SDIO总线速度，读写速度均有一定程度下降。\n\n[树莓派SD卡参考速度](http://elinux.org/RPi_SD_cards#SD_card_performance)","source":"_posts/2015-09-12-new-toy-SanDisk-Ultra-16G-Class10-UHS-I.md","raw":"title: New Toy - SanDisk Ultra 16G Class10 UHS-I\ndate: 2015-09-12 04:10:32\ntags:\ncategory:\n---\n自从iPhone开启自带Flash Rom风潮以来，外置TF卡在手机上越来越不受待见，这次为了把吃灰多年的Raspberry Pi拿出来晒晒太阳，决心新入手一块TF卡。\n吐槽下京东可能除了物流价格上真心没啥优势。。。\n先来一张大头照\n![美照](/img/20150912041903.jpg)\n然后照例验证正品，没问题。\n测试读写速度\n![ATTO Disk BenchMark](/img/2015-09-12_035642.png)\n最大速度，读45MB/s，写17MB/s左右。比官网号称48MB/s稍显乏力。。。\n写入Raspberry Pi image\n![Win32 Disk Imager](/img/2015-09-12_040514.png)\n写入速度差不多在15~16MB/s。\n\n附上对比测试，金士顿未知Class卡\n![Kinston unknown TF](/img/20150912062844.jpg)\n速度测试\n![ATTO Disk BenchMark](/img/2015-09-12_050307.png)\n看起来应该也是Class 10级别的卡。\n~~Raspberry Pi板载速度测试敬请期待。。。~~\n接上文接着测试Raspberry Pi上，方法简单粗暴，就是dd拷贝测试：\n写\n```\ndd if=/dev/zero of=~/test.tmp bs=500K count=1024\n524288000 bytes (524 MB) copied, 36.7958 s, 14.2 MB/s\n```\n读\n```\ndd if=~/test.tmp of=/dev/null bs=500K count=1024\n524288000 bytes (524 MB) copied, 28.128 s, 18.6 MB/s\n```\n这个数据与官方同款测试基本一致（详见下方链接），猜测受限于raspberry pi的SDIO总线速度，读写速度均有一定程度下降。\n\n[树莓派SD卡参考速度](http://elinux.org/RPi_SD_cards#SD_card_performance)","slug":"new-toy-SanDisk-Ultra-16G-Class10-UHS-I","published":1,"updated":"2016-08-06T07:02:18.502Z","_id":"ciriufauh0008xop3qkvs7uv8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>自从iPhone开启自带Flash Rom风潮以来，外置TF卡在手机上越来越不受待见，这次为了把吃灰多年的Raspberry Pi拿出来晒晒太阳，决心新入手一块TF卡。<br>吐槽下京东可能除了物流价格上真心没啥优势。。。<br>先来一张大头照<br><img src=\"/img/20150912041903.jpg\" alt=\"美照\"><br>然后照例验证正品，没问题。<br>测试读写速度<br><img src=\"/img/2015-09-12_035642.png\" alt=\"ATTO Disk BenchMark\"><br>最大速度，读45MB/s，写17MB/s左右。比官网号称48MB/s稍显乏力。。。<br>写入Raspberry Pi image<br><img src=\"/img/2015-09-12_040514.png\" alt=\"Win32 Disk Imager\"><br>写入速度差不多在15~16MB/s。</p>\n<p>附上对比测试，金士顿未知Class卡<br><img src=\"/img/20150912062844.jpg\" alt=\"Kinston unknown TF\"><br>速度测试<br><img src=\"/img/2015-09-12_050307.png\" alt=\"ATTO Disk BenchMark\"><br>看起来应该也是Class 10级别的卡。<br><del>Raspberry Pi板载速度测试敬请期待。。。</del><br>接上文接着测试Raspberry Pi上，方法简单粗暴，就是dd拷贝测试：<br>写<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dd if=/dev/zero of=~/test.tmp bs=<span class=\"number\">500</span>K count=<span class=\"number\">1024</span></div><div class=\"line\"><span class=\"number\">524288000</span> bytes (<span class=\"number\">524</span> MB) copied, <span class=\"number\">36.7958</span> s, <span class=\"number\">14.2</span> MB/s</div></pre></td></tr></table></figure></p>\n<p>读<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dd if=~/test.tmp of=/dev/null bs=<span class=\"number\">500</span>K count=<span class=\"number\">1024</span></div><div class=\"line\"><span class=\"number\">524288000</span> bytes (<span class=\"number\">524</span> MB) copied, <span class=\"number\">28.128</span> s, <span class=\"number\">18.6</span> MB/s</div></pre></td></tr></table></figure></p>\n<p>这个数据与官方同款测试基本一致（详见下方链接），猜测受限于raspberry pi的SDIO总线速度，读写速度均有一定程度下降。</p>\n<p><a href=\"http://elinux.org/RPi_SD_cards#SD_card_performance\" target=\"_blank\" rel=\"external\">树莓派SD卡参考速度</a></p>\n","excerpt":"","more":"<p>自从iPhone开启自带Flash Rom风潮以来，外置TF卡在手机上越来越不受待见，这次为了把吃灰多年的Raspberry Pi拿出来晒晒太阳，决心新入手一块TF卡。<br>吐槽下京东可能除了物流价格上真心没啥优势。。。<br>先来一张大头照<br><img src=\"/img/20150912041903.jpg\" alt=\"美照\"><br>然后照例验证正品，没问题。<br>测试读写速度<br><img src=\"/img/2015-09-12_035642.png\" alt=\"ATTO Disk BenchMark\"><br>最大速度，读45MB/s，写17MB/s左右。比官网号称48MB/s稍显乏力。。。<br>写入Raspberry Pi image<br><img src=\"/img/2015-09-12_040514.png\" alt=\"Win32 Disk Imager\"><br>写入速度差不多在15~16MB/s。</p>\n<p>附上对比测试，金士顿未知Class卡<br><img src=\"/img/20150912062844.jpg\" alt=\"Kinston unknown TF\"><br>速度测试<br><img src=\"/img/2015-09-12_050307.png\" alt=\"ATTO Disk BenchMark\"><br>看起来应该也是Class 10级别的卡。<br><del>Raspberry Pi板载速度测试敬请期待。。。</del><br>接上文接着测试Raspberry Pi上，方法简单粗暴，就是dd拷贝测试：<br>写<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dd if=/dev/zero of=~/test.tmp bs=<span class=\"number\">500</span>K count=<span class=\"number\">1024</span></div><div class=\"line\"><span class=\"number\">524288000</span> bytes (<span class=\"number\">524</span> MB) copied, <span class=\"number\">36.7958</span> s, <span class=\"number\">14.2</span> MB/s</div></pre></td></tr></table></figure></p>\n<p>读<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dd if=~/test.tmp of=/dev/null bs=<span class=\"number\">500</span>K count=<span class=\"number\">1024</span></div><div class=\"line\"><span class=\"number\">524288000</span> bytes (<span class=\"number\">524</span> MB) copied, <span class=\"number\">28.128</span> s, <span class=\"number\">18.6</span> MB/s</div></pre></td></tr></table></figure></p>\n<p>这个数据与官方同款测试基本一致（详见下方链接），猜测受限于raspberry pi的SDIO总线速度，读写速度均有一定程度下降。</p>\n<p><a href=\"http://elinux.org/RPi_SD_cards#SD_card_performance\">树莓派SD卡参考速度</a></p>\n"},{"title":"Design Patterns, Decorator/AOP in Python and C","date":"2015-09-20T13:14:45.000Z","category":null,"_content":"### 设计模式之装饰器/面向切面编程在Python和C中的体现\n最近接触到python中的装饰器，顿感奇妙，函数前面声明一句话，即可改变函数的部分行为。不同的声明，可以从不同方面改变函数的行为，就像一栋房子重新装修了下，就有了不同的风格。\n比如\n```python\ndef hello(fn):\n    def wrapper():\n        print \"hello, %s\" % fn.__name__\n        fn()\n        print \"goodby, %s\" % fn.__name__\n    return wrapper\n\n@hello\ndef foo():\n    print \"i am foo\"\n\nfoo()\n```\n运行后\n```\n$ python hello.py\nhello, foo\ni am foo\ngoodby, foo\n```\n追究其本质，首先是因为在python中一切皆对象，函数也不例外，所以有了动态修改函数指向对象的机会，那么经过修饰器修饰后，foo其实已不是原来的foo，而是被包装过的：`foo = hello(foo)`，再次调用时，新的foo指向了包装后的新函数，从而包括了原来的foo功能和包装器的新功能。\n> 装饰器作为一种设计模式，在插入日志，性能测试，事务处理方面有着广泛应用。\n\n作为一个C起家的程序员，看完这些突然意识到，这样的模式其实在C实践中也有很多应用，比如上面插入日志的例子，在C中就是：\n```c\nvoid foo(int x)\n{\n\tprint(\"in foo: %d\\n\", x);\n}\n```\n修饰下，插入日志。\n```c\nvoid _foo(int x)\n{\n\tprint(\"in foo: %d\\n\", x);\n}\n\n#define foo(x)\t\t\\\n\tdo {\t\t\t\\\n\t\tprintf(\"hello\\n\");\t\\\n\t\t_foo(x);\t\\\n\t\tprintf(\"goodbye\\n\");\t\\\n\t} while (0)\n```\n\n更进一步，C语言中有种特殊的调试技巧：某个函数被广泛调用，我们想追踪这个函数在动态执行时，被哪些函数调用，以及传入的参数是什么名称。\n最简单粗暴的方法就是找出所有调用的地方，前面插入跟踪代码，打印调用函数和参数。\n```c\n#define ARG_1\t50\n#define ARG_2\t100\n\nvoid foo1()\n{\n\tprintf(\"caller %s, argument ARG_1\\n\", __func__);\n\tfoo(ARG_1);\n}\n\nvoid foo2()\n{\n\tprintf(\"caller %s, argument ARG_2\\n\", __func__);\n\tfoo(ARG_2);\n}\n```\n显然这样做既费时痛苦又无扩展性，如果想跟踪其它函数，还得再这样改一遍。\n改进的做法就是用宏定义同名覆盖函数，然后加上调试信息。\n```c\nvoid _foo(int x)\n{\n\tprint(\"in foo: %d\\n\", x);\n}\n\n#define foo(x)\t\t\\\n\tdo {\t\t\t\\\n\t\tprintf(\"caller %s, argument %s\\n\", __func__, ##x);\t\\\n\t\t_foo(x);\t\\\n\t} while (0)\n```\n只需如此修改，其它所有调用foo的地方无需修改即可达到前述跟踪目的。这里面蕴含的思想其实跟修饰器是类似的：`通过修改原函数的指向，在原函数的基础上添加新功能`。\n\n当然这里有三点区别：\n1. C实现的修饰是编译时修改，而python是运行时动态修改；\n2. C函数的修饰器就是宏定义，而且需要修改原函数原型的名称，以防命名冲突；Python的修饰器是另一个函数，修饰后原函数被覆盖。\n3. C函数被修饰后，并没有生成新的函数，而是在原来的函数调用处添加了一些语句，而python简单彻底，重新生成新的函数对象。\n\n\n参考文章：\n[coolshell的Python修饰器的函数式编程](http://coolshell.cn/articles/11265.html)\n[Python装饰器与面向切面编程](http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html)","source":"_posts/2015-09-20-Design-Patterns-Decorator-AOP-in-Python-and-C-C.md","raw":"title: 'Design Patterns, Decorator/AOP in Python and C'\ndate: 2015-09-20 21:14:45\ntags:\ncategory:\n---\n### 设计模式之装饰器/面向切面编程在Python和C中的体现\n最近接触到python中的装饰器，顿感奇妙，函数前面声明一句话，即可改变函数的部分行为。不同的声明，可以从不同方面改变函数的行为，就像一栋房子重新装修了下，就有了不同的风格。\n比如\n```python\ndef hello(fn):\n    def wrapper():\n        print \"hello, %s\" % fn.__name__\n        fn()\n        print \"goodby, %s\" % fn.__name__\n    return wrapper\n\n@hello\ndef foo():\n    print \"i am foo\"\n\nfoo()\n```\n运行后\n```\n$ python hello.py\nhello, foo\ni am foo\ngoodby, foo\n```\n追究其本质，首先是因为在python中一切皆对象，函数也不例外，所以有了动态修改函数指向对象的机会，那么经过修饰器修饰后，foo其实已不是原来的foo，而是被包装过的：`foo = hello(foo)`，再次调用时，新的foo指向了包装后的新函数，从而包括了原来的foo功能和包装器的新功能。\n> 装饰器作为一种设计模式，在插入日志，性能测试，事务处理方面有着广泛应用。\n\n作为一个C起家的程序员，看完这些突然意识到，这样的模式其实在C实践中也有很多应用，比如上面插入日志的例子，在C中就是：\n```c\nvoid foo(int x)\n{\n\tprint(\"in foo: %d\\n\", x);\n}\n```\n修饰下，插入日志。\n```c\nvoid _foo(int x)\n{\n\tprint(\"in foo: %d\\n\", x);\n}\n\n#define foo(x)\t\t\\\n\tdo {\t\t\t\\\n\t\tprintf(\"hello\\n\");\t\\\n\t\t_foo(x);\t\\\n\t\tprintf(\"goodbye\\n\");\t\\\n\t} while (0)\n```\n\n更进一步，C语言中有种特殊的调试技巧：某个函数被广泛调用，我们想追踪这个函数在动态执行时，被哪些函数调用，以及传入的参数是什么名称。\n最简单粗暴的方法就是找出所有调用的地方，前面插入跟踪代码，打印调用函数和参数。\n```c\n#define ARG_1\t50\n#define ARG_2\t100\n\nvoid foo1()\n{\n\tprintf(\"caller %s, argument ARG_1\\n\", __func__);\n\tfoo(ARG_1);\n}\n\nvoid foo2()\n{\n\tprintf(\"caller %s, argument ARG_2\\n\", __func__);\n\tfoo(ARG_2);\n}\n```\n显然这样做既费时痛苦又无扩展性，如果想跟踪其它函数，还得再这样改一遍。\n改进的做法就是用宏定义同名覆盖函数，然后加上调试信息。\n```c\nvoid _foo(int x)\n{\n\tprint(\"in foo: %d\\n\", x);\n}\n\n#define foo(x)\t\t\\\n\tdo {\t\t\t\\\n\t\tprintf(\"caller %s, argument %s\\n\", __func__, ##x);\t\\\n\t\t_foo(x);\t\\\n\t} while (0)\n```\n只需如此修改，其它所有调用foo的地方无需修改即可达到前述跟踪目的。这里面蕴含的思想其实跟修饰器是类似的：`通过修改原函数的指向，在原函数的基础上添加新功能`。\n\n当然这里有三点区别：\n1. C实现的修饰是编译时修改，而python是运行时动态修改；\n2. C函数的修饰器就是宏定义，而且需要修改原函数原型的名称，以防命名冲突；Python的修饰器是另一个函数，修饰后原函数被覆盖。\n3. C函数被修饰后，并没有生成新的函数，而是在原来的函数调用处添加了一些语句，而python简单彻底，重新生成新的函数对象。\n\n\n参考文章：\n[coolshell的Python修饰器的函数式编程](http://coolshell.cn/articles/11265.html)\n[Python装饰器与面向切面编程](http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html)","slug":"Design-Patterns-Decorator-AOP-in-Python-and-C-C","published":1,"updated":"2016-08-06T07:02:18.503Z","_id":"ciriufauj0009xop3gmnadcaj","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"设计模式之装饰器/面向切面编程在Python和C中的体现\">设计模式之装饰器/面向切面编程在Python和C中的体现</h3><p>最近接触到python中的装饰器，顿感奇妙，函数前面声明一句话，即可改变函数的部分行为。不同的声明，可以从不同方面改变函数的行为，就像一栋房子重新装修了下，就有了不同的风格。<br>比如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(fn)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"hello, %s\"</span> % fn.__name__</div><div class=\"line\">        fn()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"goodby, %s\"</span> % fn.__name__</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@hello</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"i am foo\"</span></div><div class=\"line\"></div><div class=\"line\">foo()</div></pre></td></tr></table></figure></p>\n<p>运行后<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python hello<span class=\"selector-class\">.py</span></div><div class=\"line\">hello, foo</div><div class=\"line\"><span class=\"selector-tag\">i</span> am foo</div><div class=\"line\">goodby, foo</div></pre></td></tr></table></figure></p>\n<p>追究其本质，首先是因为在python中一切皆对象，函数也不例外，所以有了动态修改函数指向对象的机会，那么经过修饰器修饰后，foo其实已不是原来的foo，而是被包装过的：<code>foo = hello(foo)</code>，再次调用时，新的foo指向了包装后的新函数，从而包括了原来的foo功能和包装器的新功能。</p>\n<blockquote>\n<p>装饰器作为一种设计模式，在插入日志，性能测试，事务处理方面有着广泛应用。</p>\n</blockquote>\n<p>作为一个C起家的程序员，看完这些突然意识到，这样的模式其实在C实践中也有很多应用，比如上面插入日志的例子，在C中就是：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tprint(<span class=\"string\">\"in foo: %d\\n\"</span>, x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修饰下，插入日志。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">_f</span>oo(<span class=\"keyword\">int</span> x)</div><div class=\"line\">&#123;</div><div class=\"line\">\tprint(<span class=\"string\">\"in foo: %d\\n\"</span>, x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> foo(x)\t\t\\</span></div><div class=\"line\">\tdo &#123;\t\t\t\\</div><div class=\"line\">\t\tprintf(<span class=\"meta-string\">\"hello\\n\"</span>);\t\\</div><div class=\"line\">\t\t_foo(x);\t\\</div><div class=\"line\">\t\tprintf(<span class=\"meta-string\">\"goodbye\\n\"</span>);\t\\</div><div class=\"line\">\t&#125; while (0)</div></pre></td></tr></table></figure></p>\n<p>更进一步，C语言中有种特殊的调试技巧：某个函数被广泛调用，我们想追踪这个函数在动态执行时，被哪些函数调用，以及传入的参数是什么名称。<br>最简单粗暴的方法就是找出所有调用的地方，前面插入跟踪代码，打印调用函数和参数。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ARG_1\t50</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ARG_2\t100</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo1</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"caller %s, argument ARG_1\\n\"</span>, <span class=\"number\">__f</span>unc__);</div><div class=\"line\">\tfoo(ARG_1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"caller %s, argument ARG_2\\n\"</span>, <span class=\"number\">__f</span>unc__);</div><div class=\"line\">\tfoo(ARG_2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显然这样做既费时痛苦又无扩展性，如果想跟踪其它函数，还得再这样改一遍。<br>改进的做法就是用宏定义同名覆盖函数，然后加上调试信息。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">_f</span>oo(<span class=\"keyword\">int</span> x)</div><div class=\"line\">&#123;</div><div class=\"line\">\tprint(<span class=\"string\">\"in foo: %d\\n\"</span>, x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> foo(x)\t\t\\</span></div><div class=\"line\">\tdo &#123;\t\t\t\\</div><div class=\"line\">\t\tprintf(<span class=\"meta-string\">\"caller %s, argument %s\\n\"</span>, __func__, ##x);\t\\</div><div class=\"line\">\t\t_foo(x);\t\\</div><div class=\"line\">\t&#125; while (0)</div></pre></td></tr></table></figure></p>\n<p>只需如此修改，其它所有调用foo的地方无需修改即可达到前述跟踪目的。这里面蕴含的思想其实跟修饰器是类似的：<code>通过修改原函数的指向，在原函数的基础上添加新功能</code>。</p>\n<p>当然这里有三点区别：</p>\n<ol>\n<li>C实现的修饰是编译时修改，而python是运行时动态修改；</li>\n<li>C函数的修饰器就是宏定义，而且需要修改原函数原型的名称，以防命名冲突；Python的修饰器是另一个函数，修饰后原函数被覆盖。</li>\n<li>C函数被修饰后，并没有生成新的函数，而是在原来的函数调用处添加了一些语句，而python简单彻底，重新生成新的函数对象。</li>\n</ol>\n<p>参考文章：<br><a href=\"http://coolshell.cn/articles/11265.html\" target=\"_blank\" rel=\"external\">coolshell的Python修饰器的函数式编程</a><br><a href=\"http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html\" target=\"_blank\" rel=\"external\">Python装饰器与面向切面编程</a></p>\n","excerpt":"","more":"<h3 id=\"设计模式之装饰器/面向切面编程在Python和C中的体现\">设计模式之装饰器/面向切面编程在Python和C中的体现</h3><p>最近接触到python中的装饰器，顿感奇妙，函数前面声明一句话，即可改变函数的部分行为。不同的声明，可以从不同方面改变函数的行为，就像一栋房子重新装修了下，就有了不同的风格。<br>比如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(fn)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"hello, %s\"</span> % fn.__name__</div><div class=\"line\">        fn()</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"goodby, %s\"</span> % fn.__name__</div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@hello</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"i am foo\"</span></div><div class=\"line\"></div><div class=\"line\">foo()</div></pre></td></tr></table></figure></p>\n<p>运行后<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python hello<span class=\"selector-class\">.py</span></div><div class=\"line\">hello, foo</div><div class=\"line\"><span class=\"selector-tag\">i</span> am foo</div><div class=\"line\">goodby, foo</div></pre></td></tr></table></figure></p>\n<p>追究其本质，首先是因为在python中一切皆对象，函数也不例外，所以有了动态修改函数指向对象的机会，那么经过修饰器修饰后，foo其实已不是原来的foo，而是被包装过的：<code>foo = hello(foo)</code>，再次调用时，新的foo指向了包装后的新函数，从而包括了原来的foo功能和包装器的新功能。</p>\n<blockquote>\n<p>装饰器作为一种设计模式，在插入日志，性能测试，事务处理方面有着广泛应用。</p>\n</blockquote>\n<p>作为一个C起家的程序员，看完这些突然意识到，这样的模式其实在C实践中也有很多应用，比如上面插入日志的例子，在C中就是：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\tprint(<span class=\"string\">\"in foo: %d\\n\"</span>, x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>修饰下，插入日志。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">_f</span>oo(<span class=\"keyword\">int</span> x)</div><div class=\"line\">&#123;</div><div class=\"line\">\tprint(<span class=\"string\">\"in foo: %d\\n\"</span>, x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> foo(x)\t\t\\</div><div class=\"line\">\tdo &#123;\t\t\t\\</div><div class=\"line\">\t\tprintf(<span class=\"meta-string\">\"hello\\n\"</span>);\t\\</div><div class=\"line\">\t\t_foo(x);\t\\</div><div class=\"line\">\t\tprintf(<span class=\"meta-string\">\"goodbye\\n\"</span>);\t\\</div><div class=\"line\">\t&#125; while (0)</span></div></pre></td></tr></table></figure></p>\n<p>更进一步，C语言中有种特殊的调试技巧：某个函数被广泛调用，我们想追踪这个函数在动态执行时，被哪些函数调用，以及传入的参数是什么名称。<br>最简单粗暴的方法就是找出所有调用的地方，前面插入跟踪代码，打印调用函数和参数。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ARG_1\t50</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ARG_2\t100</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo1</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"caller %s, argument ARG_1\\n\"</span>, <span class=\"number\">__f</span>unc__);</div><div class=\"line\">\tfoo(ARG_1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"caller %s, argument ARG_2\\n\"</span>, <span class=\"number\">__f</span>unc__);</div><div class=\"line\">\tfoo(ARG_2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>显然这样做既费时痛苦又无扩展性，如果想跟踪其它函数，还得再这样改一遍。<br>改进的做法就是用宏定义同名覆盖函数，然后加上调试信息。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> <span class=\"number\">_f</span>oo(<span class=\"keyword\">int</span> x)</div><div class=\"line\">&#123;</div><div class=\"line\">\tprint(<span class=\"string\">\"in foo: %d\\n\"</span>, x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> foo(x)\t\t\\</div><div class=\"line\">\tdo &#123;\t\t\t\\</div><div class=\"line\">\t\tprintf(<span class=\"meta-string\">\"caller %s, argument %s\\n\"</span>, __func__, ##x);\t\\</div><div class=\"line\">\t\t_foo(x);\t\\</div><div class=\"line\">\t&#125; while (0)</span></div></pre></td></tr></table></figure></p>\n<p>只需如此修改，其它所有调用foo的地方无需修改即可达到前述跟踪目的。这里面蕴含的思想其实跟修饰器是类似的：<code>通过修改原函数的指向，在原函数的基础上添加新功能</code>。</p>\n<p>当然这里有三点区别：</p>\n<ol>\n<li>C实现的修饰是编译时修改，而python是运行时动态修改；</li>\n<li>C函数的修饰器就是宏定义，而且需要修改原函数原型的名称，以防命名冲突；Python的修饰器是另一个函数，修饰后原函数被覆盖。</li>\n<li>C函数被修饰后，并没有生成新的函数，而是在原来的函数调用处添加了一些语句，而python简单彻底，重新生成新的函数对象。</li>\n</ol>\n<p>参考文章：<br><a href=\"http://coolshell.cn/articles/11265.html\">coolshell的Python修饰器的函数式编程</a><br><a href=\"http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html\">Python装饰器与面向切面编程</a></p>\n"},{"title":"Set up the Hexo on Raspberry Pi","date":"2015-09-12T01:01:19.000Z","category":null,"_content":"之前烧录的Raspberry image已经自带了很多工具，其中包括git，但是hexo还不在里面。用`apt-get install nodejs`装了一个，版本非常老0.6.xx。想要更新到最新？没问题，官网直接为树莓派的老旧CPU编译好了。\n```bash\nwget http://nodejs.org/dist/latest/node-v4.0.0-linux-armv6l.tar.gz\ntar xf node-v4.0.0-linux-armv6l.tar.gz\nmv node-v4.0.0-linux-armv6l/ node\nmv node /usr/local/\nchown -R pi.pi /usr/local/node\n```\n如果后面有更新版本，上面的版本号注意替换掉。\n设置环境变量\n```bash\necho \"PATH=$PATH:/usr/local/node/bin\" >> ~/.profile\necho \"export PATH\" >> ~/.profile\nsource ~/.profile\nnode -v  #检查路径是否设置正确\n```\n安装hexo\n```bash\nnpm install -g hexo\nmkdir -p /home/hexo\ncd /home/hexo\nhexo init #添加一个博客站点\nnpm install\n```\nclone blog hexo源文件到本地\n```bash\ngit clone -b blog_code https://github.com/pansila/pansila.github.io.git\n```\n执行后会将git上blog_code分支的文件放到pansila.github.io目录，这个目录放置了hexo源代码（网页静态文件放在了master branch），因为之前在hexo目录建立hexo环境，所以要让hexo在git的文件上跑起来，需要将pansila.github.io目录下的所有东西复制到hexo目录\n```\ncp pansila.github.io .. -R\nrm pansila.github.io -R\n```\n试了下速度，rapberry pi上跑hexo性能不如乐观。。。\n同样的文件raspberry pi上，load files要24s，generate files要23s\nPC上load files只要1s，generate files 580ms\n\n参考文章：[树莓派安装node.js来跑Hexo静态博客](http://rpi.linux48.com/Hexo.html)","source":"_posts/2015-09-12-Set-up-the-Hexo-on-Raspberry-Pi.md","raw":"title: Set up the Hexo on Raspberry Pi\ndate: 2015-09-12 09:01:19\ntags:\ncategory:\n---\n之前烧录的Raspberry image已经自带了很多工具，其中包括git，但是hexo还不在里面。用`apt-get install nodejs`装了一个，版本非常老0.6.xx。想要更新到最新？没问题，官网直接为树莓派的老旧CPU编译好了。\n```bash\nwget http://nodejs.org/dist/latest/node-v4.0.0-linux-armv6l.tar.gz\ntar xf node-v4.0.0-linux-armv6l.tar.gz\nmv node-v4.0.0-linux-armv6l/ node\nmv node /usr/local/\nchown -R pi.pi /usr/local/node\n```\n如果后面有更新版本，上面的版本号注意替换掉。\n设置环境变量\n```bash\necho \"PATH=$PATH:/usr/local/node/bin\" >> ~/.profile\necho \"export PATH\" >> ~/.profile\nsource ~/.profile\nnode -v  #检查路径是否设置正确\n```\n安装hexo\n```bash\nnpm install -g hexo\nmkdir -p /home/hexo\ncd /home/hexo\nhexo init #添加一个博客站点\nnpm install\n```\nclone blog hexo源文件到本地\n```bash\ngit clone -b blog_code https://github.com/pansila/pansila.github.io.git\n```\n执行后会将git上blog_code分支的文件放到pansila.github.io目录，这个目录放置了hexo源代码（网页静态文件放在了master branch），因为之前在hexo目录建立hexo环境，所以要让hexo在git的文件上跑起来，需要将pansila.github.io目录下的所有东西复制到hexo目录\n```\ncp pansila.github.io .. -R\nrm pansila.github.io -R\n```\n试了下速度，rapberry pi上跑hexo性能不如乐观。。。\n同样的文件raspberry pi上，load files要24s，generate files要23s\nPC上load files只要1s，generate files 580ms\n\n参考文章：[树莓派安装node.js来跑Hexo静态博客](http://rpi.linux48.com/Hexo.html)","slug":"Set-up-the-Hexo-on-Raspberry-Pi","published":1,"updated":"2016-08-06T07:02:18.501Z","_id":"ciriufaun000axop3v9o793wi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前烧录的Raspberry image已经自带了很多工具，其中包括git，但是hexo还不在里面。用<code>apt-get install nodejs</code>装了一个，版本非常老0.6.xx。想要更新到最新？没问题，官网直接为树莓派的老旧CPU编译好了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://nodejs.org/dist/latest/node-v4.0.0-linux-armv6l.tar.gz</div><div class=\"line\">tar xf node-v4.0.0-linux-armv6l.tar.gz</div><div class=\"line\">mv node-v4.0.0-linux-armv6l/ node</div><div class=\"line\">mv node /usr/<span class=\"built_in\">local</span>/</div><div class=\"line\">chown -R pi.pi /usr/<span class=\"built_in\">local</span>/node</div></pre></td></tr></table></figure></p>\n<p>如果后面有更新版本，上面的版本号注意替换掉。<br>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PATH=<span class=\"variable\">$PATH</span>:/usr/local/node/bin\"</span> &gt;&gt; ~/.profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH\"</span> &gt;&gt; ~/.profile</div><div class=\"line\"><span class=\"built_in\">source</span> ~/.profile</div><div class=\"line\">node -v  <span class=\"comment\">#检查路径是否设置正确</span></div></pre></td></tr></table></figure></p>\n<p>安装hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo</div><div class=\"line\">mkdir -p /home/hexo</div><div class=\"line\"><span class=\"built_in\">cd</span> /home/hexo</div><div class=\"line\">hexo init <span class=\"comment\">#添加一个博客站点</span></div><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>clone blog hexo源文件到本地<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> -b blog_code https://github.com/pansila/pansila.github.io.git</div></pre></td></tr></table></figure></p>\n<p>执行后会将git上blog_code分支的文件放到pansila.github.io目录，这个目录放置了hexo源代码（网页静态文件放在了master branch），因为之前在hexo目录建立hexo环境，所以要让hexo在git的文件上跑起来，需要将pansila.github.io目录下的所有东西复制到hexo目录<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp pansila<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span> .. -R</div><div class=\"line\">rm pansila<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span> -R</div></pre></td></tr></table></figure></p>\n<p>试了下速度，rapberry pi上跑hexo性能不如乐观。。。<br>同样的文件raspberry pi上，load files要24s，generate files要23s<br>PC上load files只要1s，generate files 580ms</p>\n<p>参考文章：<a href=\"http://rpi.linux48.com/Hexo.html\" target=\"_blank\" rel=\"external\">树莓派安装node.js来跑Hexo静态博客</a></p>\n","excerpt":"","more":"<p>之前烧录的Raspberry image已经自带了很多工具，其中包括git，但是hexo还不在里面。用<code>apt-get install nodejs</code>装了一个，版本非常老0.6.xx。想要更新到最新？没问题，官网直接为树莓派的老旧CPU编译好了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://nodejs.org/dist/latest/node-v4.0.0-linux-armv6l.tar.gz</div><div class=\"line\">tar xf node-v4.0.0-linux-armv6l.tar.gz</div><div class=\"line\">mv node-v4.0.0-linux-armv6l/ node</div><div class=\"line\">mv node /usr/<span class=\"built_in\">local</span>/</div><div class=\"line\">chown -R pi.pi /usr/<span class=\"built_in\">local</span>/node</div></pre></td></tr></table></figure></p>\n<p>如果后面有更新版本，上面的版本号注意替换掉。<br>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"PATH=<span class=\"variable\">$PATH</span>:/usr/local/node/bin\"</span> &gt;&gt; ~/.profile</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH\"</span> &gt;&gt; ~/.profile</div><div class=\"line\"><span class=\"built_in\">source</span> ~/.profile</div><div class=\"line\">node -v  <span class=\"comment\">#检查路径是否设置正确</span></div></pre></td></tr></table></figure></p>\n<p>安装hexo<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo</div><div class=\"line\">mkdir -p /home/hexo</div><div class=\"line\"><span class=\"built_in\">cd</span> /home/hexo</div><div class=\"line\">hexo init <span class=\"comment\">#添加一个博客站点</span></div><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>clone blog hexo源文件到本地<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> -b blog_code https://github.com/pansila/pansila.github.io.git</div></pre></td></tr></table></figure></p>\n<p>执行后会将git上blog_code分支的文件放到pansila.github.io目录，这个目录放置了hexo源代码（网页静态文件放在了master branch），因为之前在hexo目录建立hexo环境，所以要让hexo在git的文件上跑起来，需要将pansila.github.io目录下的所有东西复制到hexo目录<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp pansila<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span> .. -R</div><div class=\"line\">rm pansila<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span> -R</div></pre></td></tr></table></figure></p>\n<p>试了下速度，rapberry pi上跑hexo性能不如乐观。。。<br>同样的文件raspberry pi上，load files要24s，generate files要23s<br>PC上load files只要1s，generate files 580ms</p>\n<p>参考文章：<a href=\"http://rpi.linux48.com/Hexo.html\">树莓派安装node.js来跑Hexo静态博客</a></p>\n"},{"title":"cache exercises - Ex. 1 memory read optimization","date":"2015-09-10T05:02:37.000Z","category":null,"_content":"Cache对于现代处理器提升性能有多重要就不多说了，最近看到这方面的练习，正好来实践下。\n原文来自伯乐在线请猛击[这里](http://blog.jobbole.com/89759/)\n第一个例子解释cache一次从memory读取的大小，这是可能与cache line不一致的，具体多少可以通过统计得出。\n原文使用了C#例子，正好最近学习python，这里来模拟下。\n### 1. 基于list的测试\n```python\nbuf_len = 64*1024*1024\nbuffer = [0] * buf_len\n\n# update @2015-09-20\n#def calc_at_every(step):\n#\ti = 0\n#\twhile i < buf_len:\n#\t\tbuffer[i] *= 3\n#\t\ti += step\n\ndef calc_at_every(step):\n\tfor i in xrange(0, buf_len, step):\n\t\tbuffer[i] *= 3\n\t\t\nif __name__ == '__main__':\n\tfrom timeit import Timer\n\tresults = []\n\tfor i in range(1, 33):\n\t\t#print \"test starts for step %d\" % i\n\t\tt = Timer(\"calc_at_every(%d)\" % i, \"from __main__ import calc_at_every\")\n\t\t#print t.timeit(1)\n\t\tresults.append(t.timeit(1))\n\t\n\timport matplotlib.pyplot as plt\n\tplt.plot(range(1, 33), results)\n\tplt.ylabel('runtime per step size')\n\tplt.xlabel('set size')\n\tplt.show()\n```\n最直接的模仿就是list，可惜结果差3个数量级，看下图：\n![list test](/img/2015-09-10_130439.png)\n步长为1时，遍历一遍需要12秒之多，例子中是80ms，大家感受下，cache肯定没有发挥作用。事实上随着step加倍，运行时间减半，完美的指数函数，完全忽视cache。。。\n事实上python中list跟C/C++中的array并不一样，是一个包装起来的行为类似array的对象，其占用的size远远超过元素本身之和。\n`>>> sys.getsizeof([])`\n`64`\n这里其实已经做过优化，并没有使用`for ... in ...`这样的pythonic遍历方式，因为产生一个索引list会占用同样多的memory，而且也有memory read的cache问题。难道用python做性能测试就是个杯具。。。\n**update @2015-09-20**\nxrange正是为这样的迭代所优化，它不会实际产生一个遍历list，而是按需生成数据，因此内存效率和性能都大有改善。PS：range在python3中升级成为[generator](https://wiki.python.org/moin/Generators)\n![list test by xrange](/img/2015-09-20_103325.png)\n可以看到1步遍历提高了约33%的性能，遍历一遍需要大约8秒(缩短4秒)，虽然离cache的结果还差得远，但就遍历来说是个很好的优化。\n\n### 2. 基于array的测试\n既然list不够快，那换能够直接接触memory的array。\n```python\nfrom array import array\n\nbuf_len = 64*1024*1024\nbuf = [0] * buf_len\nbuffer = array('i', buf)\n\ndef calc_at_every(step):\n\tfor i in xrange(0, buf_len, step):\n\t\tbuffer[i] *= 3\n\t\t\nif __name__ == '__main__':\n\tfrom timeit import Timer\n\tresults = []\n\tfor i in range(1, 33):\n\t\t#print \"test starts for step %d\" % i\n\t\tt = Timer(\"calc_at_every(%d)\" % i, \"from __main__ import calc_at_every\")\n\t\t#print t.timeit(1)\n\t\tresults.append(t.timeit(1))\n\t\n\timport matplotlib.pyplot as plt\n\tplt.plot(range(1, 33), results)\n\tplt.ylabel('runtime per step size')\n\tplt.xlabel('set size')\n\tplt.show()\n```\n结果更差。。。\n![Array test by xrange](/img/2015-09-20_104140.png)\n\n### 3. 基于numpy.array的测试\n```python\nfrom array import array\nimport numpy as np\n\nbuf_len = 64*1024*1024\nbuf = [0] * buf_len\nbuffer = np.array(buf)\n\ndef calc_at_every(step):\n\tfor i in xrange(0, buf_len, step):\n\t\tbuffer[i] *= 3\n\t\t\nif __name__ == '__main__':\n\tfrom timeit import Timer\n\tresults = []\n\tfor i in range(1, 33):\n\t\t#print \"test starts for step %d\" % i\n\t\tt = Timer(\"calc_at_every(%d)\" % i, \"from __main__ import calc_at_every\")\n\t\t#print t.timeit(1)\n\t\tresults.append(t.timeit(1))\n\t\n\timport matplotlib.pyplot as plt\n\tplt.plot(range(1, 33), results)\n\tplt.ylabel('runtime per step size')\n\tplt.xlabel('set size')\n\tplt.show()\n```\n惨不忍睹。。。\n![numpy.array test](/img/2015-09-20_104818.png)\n---\n**to be continued**","source":"_posts/2015-09-10-cache-exercises-memory-read-optimization.md","raw":"title: cache exercises - Ex. 1 memory read optimization\ndate: 2015-09-10 13:02:37\ntags:\ncategory:\n---\nCache对于现代处理器提升性能有多重要就不多说了，最近看到这方面的练习，正好来实践下。\n原文来自伯乐在线请猛击[这里](http://blog.jobbole.com/89759/)\n第一个例子解释cache一次从memory读取的大小，这是可能与cache line不一致的，具体多少可以通过统计得出。\n原文使用了C#例子，正好最近学习python，这里来模拟下。\n### 1. 基于list的测试\n```python\nbuf_len = 64*1024*1024\nbuffer = [0] * buf_len\n\n# update @2015-09-20\n#def calc_at_every(step):\n#\ti = 0\n#\twhile i < buf_len:\n#\t\tbuffer[i] *= 3\n#\t\ti += step\n\ndef calc_at_every(step):\n\tfor i in xrange(0, buf_len, step):\n\t\tbuffer[i] *= 3\n\t\t\nif __name__ == '__main__':\n\tfrom timeit import Timer\n\tresults = []\n\tfor i in range(1, 33):\n\t\t#print \"test starts for step %d\" % i\n\t\tt = Timer(\"calc_at_every(%d)\" % i, \"from __main__ import calc_at_every\")\n\t\t#print t.timeit(1)\n\t\tresults.append(t.timeit(1))\n\t\n\timport matplotlib.pyplot as plt\n\tplt.plot(range(1, 33), results)\n\tplt.ylabel('runtime per step size')\n\tplt.xlabel('set size')\n\tplt.show()\n```\n最直接的模仿就是list，可惜结果差3个数量级，看下图：\n![list test](/img/2015-09-10_130439.png)\n步长为1时，遍历一遍需要12秒之多，例子中是80ms，大家感受下，cache肯定没有发挥作用。事实上随着step加倍，运行时间减半，完美的指数函数，完全忽视cache。。。\n事实上python中list跟C/C++中的array并不一样，是一个包装起来的行为类似array的对象，其占用的size远远超过元素本身之和。\n`>>> sys.getsizeof([])`\n`64`\n这里其实已经做过优化，并没有使用`for ... in ...`这样的pythonic遍历方式，因为产生一个索引list会占用同样多的memory，而且也有memory read的cache问题。难道用python做性能测试就是个杯具。。。\n**update @2015-09-20**\nxrange正是为这样的迭代所优化，它不会实际产生一个遍历list，而是按需生成数据，因此内存效率和性能都大有改善。PS：range在python3中升级成为[generator](https://wiki.python.org/moin/Generators)\n![list test by xrange](/img/2015-09-20_103325.png)\n可以看到1步遍历提高了约33%的性能，遍历一遍需要大约8秒(缩短4秒)，虽然离cache的结果还差得远，但就遍历来说是个很好的优化。\n\n### 2. 基于array的测试\n既然list不够快，那换能够直接接触memory的array。\n```python\nfrom array import array\n\nbuf_len = 64*1024*1024\nbuf = [0] * buf_len\nbuffer = array('i', buf)\n\ndef calc_at_every(step):\n\tfor i in xrange(0, buf_len, step):\n\t\tbuffer[i] *= 3\n\t\t\nif __name__ == '__main__':\n\tfrom timeit import Timer\n\tresults = []\n\tfor i in range(1, 33):\n\t\t#print \"test starts for step %d\" % i\n\t\tt = Timer(\"calc_at_every(%d)\" % i, \"from __main__ import calc_at_every\")\n\t\t#print t.timeit(1)\n\t\tresults.append(t.timeit(1))\n\t\n\timport matplotlib.pyplot as plt\n\tplt.plot(range(1, 33), results)\n\tplt.ylabel('runtime per step size')\n\tplt.xlabel('set size')\n\tplt.show()\n```\n结果更差。。。\n![Array test by xrange](/img/2015-09-20_104140.png)\n\n### 3. 基于numpy.array的测试\n```python\nfrom array import array\nimport numpy as np\n\nbuf_len = 64*1024*1024\nbuf = [0] * buf_len\nbuffer = np.array(buf)\n\ndef calc_at_every(step):\n\tfor i in xrange(0, buf_len, step):\n\t\tbuffer[i] *= 3\n\t\t\nif __name__ == '__main__':\n\tfrom timeit import Timer\n\tresults = []\n\tfor i in range(1, 33):\n\t\t#print \"test starts for step %d\" % i\n\t\tt = Timer(\"calc_at_every(%d)\" % i, \"from __main__ import calc_at_every\")\n\t\t#print t.timeit(1)\n\t\tresults.append(t.timeit(1))\n\t\n\timport matplotlib.pyplot as plt\n\tplt.plot(range(1, 33), results)\n\tplt.ylabel('runtime per step size')\n\tplt.xlabel('set size')\n\tplt.show()\n```\n惨不忍睹。。。\n![numpy.array test](/img/2015-09-20_104818.png)\n---\n**to be continued**","slug":"cache-exercises-memory-read-optimization","published":1,"updated":"2016-08-06T07:02:18.499Z","_id":"ciriufauo000bxop3xq3bjewc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Cache对于现代处理器提升性能有多重要就不多说了，最近看到这方面的练习，正好来实践下。<br>原文来自伯乐在线请猛击<a href=\"http://blog.jobbole.com/89759/\" target=\"_blank\" rel=\"external\">这里</a><br>第一个例子解释cache一次从memory读取的大小，这是可能与cache line不一致的，具体多少可以通过统计得出。<br>原文使用了C#例子，正好最近学习python，这里来模拟下。</p>\n<h3 id=\"1-_基于list的测试\">1. 基于list的测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf_len = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></div><div class=\"line\">buffer = [<span class=\"number\">0</span>] * buf_len</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># update @2015-09-20</span></div><div class=\"line\"><span class=\"comment\">#def calc_at_every(step):</span></div><div class=\"line\"><span class=\"comment\">#\ti = 0</span></div><div class=\"line\"><span class=\"comment\">#\twhile i &lt; buf_len:</span></div><div class=\"line\"><span class=\"comment\">#\t\tbuffer[i] *= 3</span></div><div class=\"line\"><span class=\"comment\">#\t\ti += step</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_at_every</span><span class=\"params\">(step)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, buf_len, step):</div><div class=\"line\">\t\tbuffer[i] *= <span class=\"number\">3</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</div><div class=\"line\">\tresults = []</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">33</span>):</div><div class=\"line\">\t\t<span class=\"comment\">#print \"test starts for step %d\" % i</span></div><div class=\"line\">\t\tt = Timer(<span class=\"string\">\"calc_at_every(%d)\"</span> % i, <span class=\"string\">\"from __main__ import calc_at_every\"</span>)</div><div class=\"line\">\t\t<span class=\"comment\">#print t.timeit(1)</span></div><div class=\"line\">\t\tresults.append(t.timeit(<span class=\"number\">1</span>))</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">\tplt.plot(range(<span class=\"number\">1</span>, <span class=\"number\">33</span>), results)</div><div class=\"line\">\tplt.ylabel(<span class=\"string\">'runtime per step size'</span>)</div><div class=\"line\">\tplt.xlabel(<span class=\"string\">'set size'</span>)</div><div class=\"line\">\tplt.show()</div></pre></td></tr></table></figure>\n<p>最直接的模仿就是list，可惜结果差3个数量级，看下图：<br><img src=\"/img/2015-09-10_130439.png\" alt=\"list test\"><br>步长为1时，遍历一遍需要12秒之多，例子中是80ms，大家感受下，cache肯定没有发挥作用。事实上随着step加倍，运行时间减半，完美的指数函数，完全忽视cache。。。<br>事实上python中list跟C/C++中的array并不一样，是一个包装起来的行为类似array的对象，其占用的size远远超过元素本身之和。<br><code>&gt;&gt;&gt; sys.getsizeof([])</code><br><code>64</code><br>这里其实已经做过优化，并没有使用<code>for ... in ...</code>这样的pythonic遍历方式，因为产生一个索引list会占用同样多的memory，而且也有memory read的cache问题。难道用python做性能测试就是个杯具。。。<br><strong>update @2015-09-20</strong><br>xrange正是为这样的迭代所优化，它不会实际产生一个遍历list，而是按需生成数据，因此内存效率和性能都大有改善。PS：range在python3中升级成为<a href=\"https://wiki.python.org/moin/Generators\" target=\"_blank\" rel=\"external\">generator</a><br><img src=\"/img/2015-09-20_103325.png\" alt=\"list test by xrange\"><br>可以看到1步遍历提高了约33%的性能，遍历一遍需要大约8秒(缩短4秒)，虽然离cache的结果还差得远，但就遍历来说是个很好的优化。</p>\n<h3 id=\"2-_基于array的测试\">2. 基于array的测试</h3><p>既然list不够快，那换能够直接接触memory的array。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</div><div class=\"line\"></div><div class=\"line\">buf_len = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></div><div class=\"line\">buf = [<span class=\"number\">0</span>] * buf_len</div><div class=\"line\">buffer = array(<span class=\"string\">'i'</span>, buf)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_at_every</span><span class=\"params\">(step)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, buf_len, step):</div><div class=\"line\">\t\tbuffer[i] *= <span class=\"number\">3</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</div><div class=\"line\">\tresults = []</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">33</span>):</div><div class=\"line\">\t\t<span class=\"comment\">#print \"test starts for step %d\" % i</span></div><div class=\"line\">\t\tt = Timer(<span class=\"string\">\"calc_at_every(%d)\"</span> % i, <span class=\"string\">\"from __main__ import calc_at_every\"</span>)</div><div class=\"line\">\t\t<span class=\"comment\">#print t.timeit(1)</span></div><div class=\"line\">\t\tresults.append(t.timeit(<span class=\"number\">1</span>))</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">\tplt.plot(range(<span class=\"number\">1</span>, <span class=\"number\">33</span>), results)</div><div class=\"line\">\tplt.ylabel(<span class=\"string\">'runtime per step size'</span>)</div><div class=\"line\">\tplt.xlabel(<span class=\"string\">'set size'</span>)</div><div class=\"line\">\tplt.show()</div></pre></td></tr></table></figure></p>\n<p>结果更差。。。<br><img src=\"/img/2015-09-20_104140.png\" alt=\"Array test by xrange\"></p>\n<h3 id=\"3-_基于numpy-array的测试\">3. 基于numpy.array的测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">buf_len = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></div><div class=\"line\">buf = [<span class=\"number\">0</span>] * buf_len</div><div class=\"line\">buffer = np.array(buf)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_at_every</span><span class=\"params\">(step)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, buf_len, step):</div><div class=\"line\">\t\tbuffer[i] *= <span class=\"number\">3</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</div><div class=\"line\">\tresults = []</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">33</span>):</div><div class=\"line\">\t\t<span class=\"comment\">#print \"test starts for step %d\" % i</span></div><div class=\"line\">\t\tt = Timer(<span class=\"string\">\"calc_at_every(%d)\"</span> % i, <span class=\"string\">\"from __main__ import calc_at_every\"</span>)</div><div class=\"line\">\t\t<span class=\"comment\">#print t.timeit(1)</span></div><div class=\"line\">\t\tresults.append(t.timeit(<span class=\"number\">1</span>))</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">\tplt.plot(range(<span class=\"number\">1</span>, <span class=\"number\">33</span>), results)</div><div class=\"line\">\tplt.ylabel(<span class=\"string\">'runtime per step size'</span>)</div><div class=\"line\">\tplt.xlabel(<span class=\"string\">'set size'</span>)</div><div class=\"line\">\tplt.show()</div></pre></td></tr></table></figure>\n<p>惨不忍睹。。。</p>\n<h2 id=\"\"><img src=\"/img/2015-09-20_104818.png\" alt=\"numpy.array test\"></h2><p><strong>to be continued</strong></p>\n","excerpt":"","more":"<p>Cache对于现代处理器提升性能有多重要就不多说了，最近看到这方面的练习，正好来实践下。<br>原文来自伯乐在线请猛击<a href=\"http://blog.jobbole.com/89759/\">这里</a><br>第一个例子解释cache一次从memory读取的大小，这是可能与cache line不一致的，具体多少可以通过统计得出。<br>原文使用了C#例子，正好最近学习python，这里来模拟下。</p>\n<h3 id=\"1-_基于list的测试\">1. 基于list的测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf_len = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></div><div class=\"line\">buffer = [<span class=\"number\">0</span>] * buf_len</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># update @2015-09-20</span></div><div class=\"line\"><span class=\"comment\">#def calc_at_every(step):</span></div><div class=\"line\"><span class=\"comment\">#\ti = 0</span></div><div class=\"line\"><span class=\"comment\">#\twhile i &lt; buf_len:</span></div><div class=\"line\"><span class=\"comment\">#\t\tbuffer[i] *= 3</span></div><div class=\"line\"><span class=\"comment\">#\t\ti += step</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_at_every</span><span class=\"params\">(step)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, buf_len, step):</div><div class=\"line\">\t\tbuffer[i] *= <span class=\"number\">3</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</div><div class=\"line\">\tresults = []</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">33</span>):</div><div class=\"line\">\t\t<span class=\"comment\">#print \"test starts for step %d\" % i</span></div><div class=\"line\">\t\tt = Timer(<span class=\"string\">\"calc_at_every(%d)\"</span> % i, <span class=\"string\">\"from __main__ import calc_at_every\"</span>)</div><div class=\"line\">\t\t<span class=\"comment\">#print t.timeit(1)</span></div><div class=\"line\">\t\tresults.append(t.timeit(<span class=\"number\">1</span>))</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">\tplt.plot(range(<span class=\"number\">1</span>, <span class=\"number\">33</span>), results)</div><div class=\"line\">\tplt.ylabel(<span class=\"string\">'runtime per step size'</span>)</div><div class=\"line\">\tplt.xlabel(<span class=\"string\">'set size'</span>)</div><div class=\"line\">\tplt.show()</div></pre></td></tr></table></figure>\n<p>最直接的模仿就是list，可惜结果差3个数量级，看下图：<br><img src=\"/img/2015-09-10_130439.png\" alt=\"list test\"><br>步长为1时，遍历一遍需要12秒之多，例子中是80ms，大家感受下，cache肯定没有发挥作用。事实上随着step加倍，运行时间减半，完美的指数函数，完全忽视cache。。。<br>事实上python中list跟C/C++中的array并不一样，是一个包装起来的行为类似array的对象，其占用的size远远超过元素本身之和。<br><code>&gt;&gt;&gt; sys.getsizeof([])</code><br><code>64</code><br>这里其实已经做过优化，并没有使用<code>for ... in ...</code>这样的pythonic遍历方式，因为产生一个索引list会占用同样多的memory，而且也有memory read的cache问题。难道用python做性能测试就是个杯具。。。<br><strong>update @2015-09-20</strong><br>xrange正是为这样的迭代所优化，它不会实际产生一个遍历list，而是按需生成数据，因此内存效率和性能都大有改善。PS：range在python3中升级成为<a href=\"https://wiki.python.org/moin/Generators\">generator</a><br><img src=\"/img/2015-09-20_103325.png\" alt=\"list test by xrange\"><br>可以看到1步遍历提高了约33%的性能，遍历一遍需要大约8秒(缩短4秒)，虽然离cache的结果还差得远，但就遍历来说是个很好的优化。</p>\n<h3 id=\"2-_基于array的测试\">2. 基于array的测试</h3><p>既然list不够快，那换能够直接接触memory的array。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</div><div class=\"line\"></div><div class=\"line\">buf_len = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></div><div class=\"line\">buf = [<span class=\"number\">0</span>] * buf_len</div><div class=\"line\">buffer = array(<span class=\"string\">'i'</span>, buf)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_at_every</span><span class=\"params\">(step)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, buf_len, step):</div><div class=\"line\">\t\tbuffer[i] *= <span class=\"number\">3</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</div><div class=\"line\">\tresults = []</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">33</span>):</div><div class=\"line\">\t\t<span class=\"comment\">#print \"test starts for step %d\" % i</span></div><div class=\"line\">\t\tt = Timer(<span class=\"string\">\"calc_at_every(%d)\"</span> % i, <span class=\"string\">\"from __main__ import calc_at_every\"</span>)</div><div class=\"line\">\t\t<span class=\"comment\">#print t.timeit(1)</span></div><div class=\"line\">\t\tresults.append(t.timeit(<span class=\"number\">1</span>))</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">\tplt.plot(range(<span class=\"number\">1</span>, <span class=\"number\">33</span>), results)</div><div class=\"line\">\tplt.ylabel(<span class=\"string\">'runtime per step size'</span>)</div><div class=\"line\">\tplt.xlabel(<span class=\"string\">'set size'</span>)</div><div class=\"line\">\tplt.show()</div></pre></td></tr></table></figure></p>\n<p>结果更差。。。<br><img src=\"/img/2015-09-20_104140.png\" alt=\"Array test by xrange\"></p>\n<h3 id=\"3-_基于numpy-array的测试\">3. 基于numpy.array的测试</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> array <span class=\"keyword\">import</span> array</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">buf_len = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></div><div class=\"line\">buf = [<span class=\"number\">0</span>] * buf_len</div><div class=\"line\">buffer = np.array(buf)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_at_every</span><span class=\"params\">(step)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, buf_len, step):</div><div class=\"line\">\t\tbuffer[i] *= <span class=\"number\">3</span></div><div class=\"line\">\t\t</div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> Timer</div><div class=\"line\">\tresults = []</div><div class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">33</span>):</div><div class=\"line\">\t\t<span class=\"comment\">#print \"test starts for step %d\" % i</span></div><div class=\"line\">\t\tt = Timer(<span class=\"string\">\"calc_at_every(%d)\"</span> % i, <span class=\"string\">\"from __main__ import calc_at_every\"</span>)</div><div class=\"line\">\t\t<span class=\"comment\">#print t.timeit(1)</span></div><div class=\"line\">\t\tresults.append(t.timeit(<span class=\"number\">1</span>))</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\">\tplt.plot(range(<span class=\"number\">1</span>, <span class=\"number\">33</span>), results)</div><div class=\"line\">\tplt.ylabel(<span class=\"string\">'runtime per step size'</span>)</div><div class=\"line\">\tplt.xlabel(<span class=\"string\">'set size'</span>)</div><div class=\"line\">\tplt.show()</div></pre></td></tr></table></figure>\n<p>惨不忍睹。。。</p>\n<h2 id=\"\"><img src=\"/img/2015-09-20_104818.png\" alt=\"numpy.array test\"></h2><p><strong>to be continued</strong></p>\n"},{"title":"Work on the cloud thoroughly","date":"2016-08-06T07:04:00.000Z","layout":"post","_content":"随着工作环境的增多，工作内容的同步变得越来越麻烦。以前我们拿U盘拷或者网盘共享，现在进入的云时代，如果不考虑隐私问题，托管在云端不失为一个好办法。\n目前初步计划完成代码部分的云托管，随后拓展到笔记，个人知识库，二进制资料等等。\n\n代码\ngithub是首选，如果要托管私人项目，可以选择gitlab。\n","source":"_posts/2016/2016-08-06-work-on-the-cloud-thoroughly.md","raw":"---\ntitle: \"Work on the cloud thoroughly\"\ndate: \"2016-08-06 15:04\"\nlayout: \"post\"\n---\n随着工作环境的增多，工作内容的同步变得越来越麻烦。以前我们拿U盘拷或者网盘共享，现在进入的云时代，如果不考虑隐私问题，托管在云端不失为一个好办法。\n目前初步计划完成代码部分的云托管，随后拓展到笔记，个人知识库，二进制资料等等。\n\n代码\ngithub是首选，如果要托管私人项目，可以选择gitlab。\n","slug":"2016-2016-08-06-work-on-the-cloud-thoroughly","published":1,"updated":"2016-08-06T07:12:34.589Z","_id":"ciriufavc000cxop34pwvy0e7","comments":1,"photos":[],"link":"","content":"<p>随着工作环境的增多，工作内容的同步变得越来越麻烦。以前我们拿U盘拷或者网盘共享，现在进入的云时代，如果不考虑隐私问题，托管在云端不失为一个好办法。<br>目前初步计划完成代码部分的云托管，随后拓展到笔记，个人知识库，二进制资料等等。</p>\n<p>代码<br>github是首选，如果要托管私人项目，可以选择gitlab。</p>\n","excerpt":"","more":"<p>随着工作环境的增多，工作内容的同步变得越来越麻烦。以前我们拿U盘拷或者网盘共享，现在进入的云时代，如果不考虑隐私问题，托管在云端不失为一个好办法。<br>目前初步计划完成代码部分的云托管，随后拓展到笔记，个人知识库，二进制资料等等。</p>\n<p>代码<br>github是首选，如果要托管私人项目，可以选择gitlab。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}